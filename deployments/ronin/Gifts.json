{
  "address": "0xC1f6FBC6dA4234239f44BECCE0438545F8Cdbf5E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nativeTokenWrapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_restrictionController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FailedtoRefundNativeToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GiftAlreadyCancelled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GiftAlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidControllerAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidGift",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "InvalidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRestriction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVerifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyGifts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyGiftsToCancel",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyRestrictions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "restriction",
          "type": "string"
        }
      ],
      "name": "UnmetRestriction",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_restrictionController",
          "type": "address"
        }
      ],
      "name": "ControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_giftID",
          "type": "uint256"
        }
      ],
      "name": "GiftCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_giftID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_claimedBy",
          "type": "address"
        }
      ],
      "name": "GiftClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_giftID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_createdBy",
          "type": "address"
        }
      ],
      "name": "GiftCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_GIFTS_PER_CANCEL_TX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_GIFTS_PER_CREATEGIFTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_RESTRICTIONS_PER_GIFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_PER_GIFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_giftIDs",
          "type": "uint256[]"
        }
      ],
      "name": "cancelGifts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_giftID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "claimGift",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "assetContract",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IGifts.Token[]",
              "name": "tokens",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "id",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IGifts.Restriction[]",
              "name": "restrictions",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            }
          ],
          "internalType": "struct IGifts.NewGiftPayload",
          "name": "_newGift",
          "type": "tuple"
        }
      ],
      "name": "createGift",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "assetContract",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IGifts.Token[]",
              "name": "tokens",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "id",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IGifts.Restriction[]",
              "name": "restrictions",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            }
          ],
          "internalType": "struct IGifts.NewGiftPayload[]",
          "name": "_newGift",
          "type": "tuple[]"
        }
      ],
      "name": "createGifts",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "name": "getGift",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "giftID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "cancelled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "id",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IGifts.Restriction[]",
              "name": "restrictions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "assetContract",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IGifts.Token[]",
              "name": "tokens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IGifts.Gift",
          "name": "currentGift",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnclaimedGifts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "giftID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "cancelled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "id",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IGifts.Restriction[]",
              "name": "restrictions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "assetContract",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IGifts.Token[]",
              "name": "tokens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IGifts.Gift[]",
          "name": "giftsTemp",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_restrictionController",
          "type": "address"
        }
      ],
      "name": "updateController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7c34929a05fbee9edc3d1de192c6838064372cba6ef5616ecbe3d4ef03396b35",
  "receipt": {
    "to": null,
    "from": "0x4d58Ea7231c394d5804e8B06B1365915f906E27F",
    "contractAddress": "0xC1f6FBC6dA4234239f44BECCE0438545F8Cdbf5E",
    "transactionIndex": 0,
    "gasUsed": "2809810",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000002000000000000008000400000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000080000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5991d51c36b2d28a9709f3ec6b100636a867ec025b57d84049924c92279c9671",
    "transactionHash": "0x7c34929a05fbee9edc3d1de192c6838064372cba6ef5616ecbe3d4ef03396b35",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 28346680,
        "transactionHash": "0x7c34929a05fbee9edc3d1de192c6838064372cba6ef5616ecbe3d4ef03396b35",
        "address": "0xC1f6FBC6dA4234239f44BECCE0438545F8Cdbf5E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004d58ea7231c394d5804e8b06b1365915f906e27f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5991d51c36b2d28a9709f3ec6b100636a867ec025b57d84049924c92279c9671"
      }
    ],
    "blockNumber": 28346680,
    "cumulativeGasUsed": "2809810",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe514d9DEB7966c8BE0ca922de8a064264eA6bcd4",
    "0x0A2CCB496A78cB855673c679D14c42A9d8b0DFe0"
  ],
  "numDeployments": 1,
  "solcInputHash": "550fb2d37d185848d644b50a7698ba93",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeTokenWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_restrictionController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedtoRefundNativeToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GiftAlreadyCancelled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GiftAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidControllerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidGift\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRestriction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVerifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyGifts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyGiftsToCancel\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyRestrictions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"restriction\",\"type\":\"string\"}],\"name\":\"UnmetRestriction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_restrictionController\",\"type\":\"address\"}],\"name\":\"ControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_giftID\",\"type\":\"uint256\"}],\"name\":\"GiftCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_giftID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_claimedBy\",\"type\":\"address\"}],\"name\":\"GiftClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_giftID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_createdBy\",\"type\":\"address\"}],\"name\":\"GiftCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_GIFTS_PER_CANCEL_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GIFTS_PER_CREATEGIFTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RESTRICTIONS_PER_GIFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_PER_GIFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_giftIDs\",\"type\":\"uint256[]\"}],\"name\":\"cancelGifts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_giftID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimGift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGifts.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"internalType\":\"struct IGifts.Restriction[]\",\"name\":\"restrictions\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"internalType\":\"struct IGifts.NewGiftPayload\",\"name\":\"_newGift\",\"type\":\"tuple\"}],\"name\":\"createGift\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGifts.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"internalType\":\"struct IGifts.Restriction[]\",\"name\":\"restrictions\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"internalType\":\"struct IGifts.NewGiftPayload[]\",\"name\":\"_newGift\",\"type\":\"tuple[]\"}],\"name\":\"createGifts\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"getGift\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"giftID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"internalType\":\"struct IGifts.Restriction[]\",\"name\":\"restrictions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGifts.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IGifts.Gift\",\"name\":\"currentGift\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnclaimedGifts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"giftID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"internalType\":\"struct IGifts.Restriction[]\",\"name\":\"restrictions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGifts.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IGifts.Gift[]\",\"name\":\"giftsTemp\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_restrictionController\",\"type\":\"address\"}],\"name\":\"updateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"dw\",\"details\":\"Allows trustlessly give ERC20/ERC721/ERC1115/RON (aka 'Token') gifts to not yet known recepients.\",\"kind\":\"dev\",\"methods\":{\"cancelGifts(uint256[])\":{\"details\":\"Cancel a set of gifts Requirements: - Valid _giftID[] list of unclaimed active gift\",\"params\":{\"_giftIDs\":\"[] array of gifts to be cancelled\"}},\"claimGift(uint256,address,bytes)\":{\"details\":\"Claims a gift using its secret and a signed message from the recipient. Requirements: - Valid _giftID and verified _signature of unclaimed gift\",\"params\":{\"_giftID\":\"ID of a gift\",\"_receiver\":\"Who should receive the gift\",\"_signature\":\"The signed message from the recipient of the gift.\"}},\"constructor\":{\"details\":\"Constructor function\",\"params\":{\"_nativeTokenWrapper\":\"The address of the native token wrapper contract\",\"_restrictionController\":\"The address of the access control contract\"}},\"createGift(((address,uint256,uint256)[],(string,bytes)[],address))\":{\"details\":\"Creates a single gift in the specified payload\",\"params\":{\"_newGift\":\"The payload containing the gift information\"}},\"createGifts(((address,uint256,uint256)[],(string,bytes)[],address)[])\":{\"details\":\"Creates multiple gifts in the specified payload array\",\"params\":{\"_newGift\":\"The payloads containing the gift information\"}},\"emergencyExit()\":{\"details\":\"Emergency exit function to cancel all existing gifts and return the tokens to the gift creators.\"},\"getGift(address)\":{\"details\":\"Retrieves the gift by using verifier address\",\"params\":{\"_verifier\":\"Verifier address\"},\"returns\":{\"currentGift\":\"The information of the gift\"}},\"getUnclaimedGifts()\":{\"details\":\"Get all unclaimed gifts created by a given address\",\"returns\":{\"giftsTemp\":\"The list of all active unclaimedd gifts for caller's address\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateController(address)\":{\"details\":\"Set the restriction controller contract address\",\"params\":{\"_restrictionController\":\"The address of the valid contract\"}}},\"title\":\"Token Gifting Smart Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"updateController(address)\":{\"notice\":\"Need to make sure the restriction controller is correct\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gifts.sol\":\"Gifts\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x10a6688bc4154b1b76268dbaf497bd8b24f77525ecb9cf829bd3cccec98eefc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5e8c266715f6454b732e6c12a85f75dcf3b1c298a90830bb56bfda29fa5b6264\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x67ef46fef257faae47adb630aad49694dda0334e5f7a7c5fb386243b974886b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Gifts.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.21;\\n\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n//import {ERC2771Recipient} from \\\"@opengsn/contracts/src/ERC2771Recipient.sol\\\";\\nimport {ERC2771Context} from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Ownable, Context} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IRestrictionControl} from \\\"./Interfaces/IRestrictionControl.sol\\\";\\nimport {InterfaceChecker, IERC1155, IERC721} from \\\"./lib/InterfaceChecker.sol\\\";\\nimport {CurrencyTransferLib} from \\\"./lib/CurrencyTransferLib.sol\\\";\\nimport \\\"./Interfaces/IGifts.sol\\\";\\n\\n/**\\n * @title Token Gifting Smart Contract\\n * @author dw\\n *\\n * @dev Allows trustlessly give ERC20/ERC721/ERC1115/RON (aka 'Token') gifts to not yet known recepients.\\n *\\n */\\ncontract Gifts is IGifts, ERC721Holder, ERC1155Holder, ERC2771Context, Ownable {\\n  using InterfaceChecker for address;\\n  IRestrictionControl private restrictionController;\\n  address internal immutable nativeTokenWrapper;\\n  uint256 public constant MAX_RESTRICTIONS_PER_GIFT = 10;\\n  uint256 public constant MAX_TOKENS_PER_GIFT = 100;\\n  uint256 public constant MAX_GIFTS_PER_CREATEGIFTS = 100;\\n  uint256 public constant MAX_GIFTS_PER_CANCEL_TX = 100;\\n  uint256 private giftCounter;\\n\\n  mapping(uint256 => Gift) private allGifts; // Mapping from giftID to gift information\\n  mapping(address => uint256) private allVerifiers; // Mapping from verifier address to giftID\\n\\n  /**\\n   * @dev Constructor function\\n   * @param _nativeTokenWrapper The address of the native token wrapper contract\\n   * @param _restrictionController The address of the access control contract\\n   */\\n  constructor(address _nativeTokenWrapper, address _restrictionController) ERC2771Context(address(0)) {\\n    nativeTokenWrapper = _nativeTokenWrapper;\\n    restrictionController = IRestrictionControl(_restrictionController);\\n    //_setTrustedForwarder(address(0));\\n  }\\n\\n  /**\\n   * @dev Fallback function to receive payments.\\n   */\\n  receive() external payable virtual {\\n    require(_msgSender() == nativeTokenWrapper, \\\"caller not native token wrapper.\\\");\\n  }\\n\\n  /**\\n   * @dev Modifier to check if a gift is valid.\\n   * @param _giftID The ID of the gift to check.\\n   */\\n  modifier validGift(uint256 _giftID) {\\n    _checkGiftValidity(_giftID);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Checks if a gift is valid.\\n   * @param _giftID The ID of the gift to check.\\n   */\\n  function _checkGiftValidity(uint256 _giftID) internal view virtual {\\n    Gift storage currentGift = allGifts[_giftID];\\n    if (currentGift.cancelled) revert GiftAlreadyCancelled();\\n    if (currentGift.claimed) revert GiftAlreadyClaimed();\\n    if (currentGift.creator == address(0)) revert InvalidGift();\\n  }\\n\\n  /**\\n   * @dev Set the restriction controller contract address\\n   * @param _restrictionController The address of the valid contract\\n   * @notice Need to make sure the restriction controller is correct\\n   */\\n  function updateController(address _restrictionController) external onlyOwner {\\n    if (_restrictionController.code.length == 0) revert InvalidControllerAddress();\\n    if (!_restrictionController.isRestrictionControl()) revert InvalidControllerAddress();\\n    if (_restrictionController == address(0)) revert InvalidControllerAddress();\\n    restrictionController = IRestrictionControl(_restrictionController);\\n    emit ControllerUpdated(_restrictionController);\\n  }\\n\\n  // function setTrustedForwarder(address _trustedForwarder) external onlyOwner {\\n  //   _setTrustedForwarder(_trustedForwarder);\\n  // }\\n\\n  /**\\n   * @dev Creates a single gift in the specified payload\\n   *\\n   * @param _newGift The payload containing the gift information\\n   */\\n\\n  function createGift(NewGiftPayload calldata _newGift) external payable {\\n    uint256 _remainingBalance = msg.value;\\n    (uint256 giftID, uint256 nativeTokenValue) = _processGift(_newGift);\\n    _remainingBalance -= nativeTokenValue;\\n\\n    // Refund RON leftover if any\\n    if (_remainingBalance > 0) {\\n      (bool success, ) = payable(_msgSender()).call{value: _remainingBalance}(\\\"\\\");\\n      if (!success) revert FailedtoRefundNativeToken();\\n    }\\n\\n    emit GiftCreated(giftID, _msgSender());\\n  }\\n\\n  /**\\n   * @dev Creates multiple gifts in the specified payload array\\n   *\\n   * @param _newGift The payloads containing the gift information\\n   */\\n  function createGifts(NewGiftPayload[] calldata _newGift) external payable {\\n    uint256 _arrayLength = _newGift.length;\\n    if (_arrayLength > MAX_GIFTS_PER_CREATEGIFTS) revert TooManyGifts();\\n\\n    uint256 _remainingBalance = msg.value;\\n    for (uint256 _i = 0; _i < _arrayLength; ) {\\n      unchecked {\\n        (uint256 giftID, uint256 nativeTokenValue) = _processGift(_newGift[_i]);\\n        _remainingBalance -= nativeTokenValue;\\n        emit GiftCreated(giftID, _msgSender());\\n        _i++;\\n      }\\n    }\\n\\n    // Refund RON leftover if any\\n    if (_remainingBalance > 0) {\\n      (bool success, ) = payable(_msgSender()).call{value: _remainingBalance}(\\\"\\\");\\n      if (!success) revert FailedtoRefundNativeToken();\\n    }\\n  }\\n\\n  /**\\n   * @dev Processes a gift by creating it and transferring tokens to the contract.\\n   *\\n   * @param _newGift The payload containing the gift information\\n   * @return giftID The ID of the created gift\\n   * @return nativeTokenValue The value of native tokens transferred to the contract (used for refunds)\\n   */\\n  function _processGift(NewGiftPayload calldata _newGift) internal returns (uint256 giftID, uint256 nativeTokenValue) {\\n    giftID = _createGift(_newGift.tokens, _newGift.restrictions, _newGift.verifier);\\n    nativeTokenValue = _transferTokenBatch(_msgSender(), address(this), _newGift.tokens);\\n  }\\n\\n  /**\\n   * @dev Internal function to create a gift with the specified tokens, restrictions, and verifier.\\n   *\\n   * @param _tokens The tokens to be included in the gift\\n   * @param _restrictions The restrictions to be applied to the gift\\n   * @param _verifier The verifier address for the gift\\n   * @return giftID The ID of the created gift\\n   */\\n  function _createGift(\\n    Token[] calldata _tokens,\\n    Restriction[] calldata _restrictions,\\n    address _verifier\\n  ) internal returns (uint256 giftID) {\\n    if (_verifier == address(0)) revert InvalidVerifier();\\n    if (allVerifiers[_verifier] != 0) revert InvalidVerifier();\\n\\n    uint256 _tokensLength = _tokens.length;\\n    if (_tokensLength > MAX_TOKENS_PER_GIFT) revert TooManyTokens();\\n\\n    uint256 _restrictionsLength = _restrictions.length;\\n\\n    // Get a new unique gift ID\\n    giftID = ++giftCounter;\\n\\n    // assign tokens to Gifts struct\\n    for (uint256 _i = 0; _i < _tokensLength; ) {\\n      allGifts[giftID].tokens.push(_tokens[_i]);\\n      unchecked {\\n        _i++;\\n      }\\n    }\\n\\n    // assign restrictions to Gifts struct (if any)\\n    if (_restrictionsLength > 0) {\\n      if (_restrictionsLength > MAX_RESTRICTIONS_PER_GIFT) revert TooManyRestrictions();\\n      for (uint256 _i = 0; _i < _restrictionsLength; ) {\\n        if (!restrictionController.isValidRestriction(_restrictions[_i].id)) revert InvalidRestriction();\\n        allGifts[giftID].restrictions.push(_restrictions[_i]);\\n        unchecked {\\n          _i++;\\n        }\\n      }\\n    }\\n\\n    // Save the gift information\\n    allGifts[giftID].creator = _msgSender();\\n    allGifts[giftID].createdAt = block.timestamp;\\n    allGifts[giftID].giftID = giftID;\\n    allVerifiers[_verifier] = giftID;\\n  }\\n\\n  /**\\n   * @dev Retrieves the gift by using verifier address\\n   *\\n   * @param _verifier Verifier address\\n   * @return currentGift The information of the gift\\n   *\\n   */\\n  function getGift(address _verifier) external view returns (Gift memory currentGift) {\\n    // Retrieve the current gift from the mapping.\\n    uint256 giftID = allVerifiers[_verifier];\\n    currentGift = allGifts[giftID];\\n\\n    // Check if the gift exists\\n    if (allGifts[giftID].creator == address(0)) revert InvalidGift();\\n  }\\n\\n  /**\\n   * @dev Claims a gift using its secret and a signed message from the recipient.\\n   *\\n   * Requirements:\\n   * - Valid _giftID and verified _signature of unclaimed gift\\n   *\\n   * @param _giftID ID of a gift\\n   * @param _receiver Who should receive the gift\\n   * @param _signature The signed message from the recipient of the gift.\\n   */\\n  function claimGift(uint256 _giftID, address _receiver, bytes calldata _signature) external validGift(_giftID) {\\n    // Verify that the recipient of the gift is the same as the signer of the message.\\n    address _verifier = getVerifier(_giftID, _receiver, _signature);\\n    if (allVerifiers[_verifier] != _giftID) revert InvalidVerifier();\\n\\n    // Retrieve the current gift from the mapping.\\n    Gift storage currentGift = allGifts[_giftID];\\n\\n    if (currentGift.creator == _receiver) revert Unauthorized();\\n\\n    // Check for gift restrictions\\n    uint256 _restrictionsLength = currentGift.restrictions.length;\\n    for (uint256 _i = 0; _i < _restrictionsLength; ) {\\n      bool restrictionCheck = restrictionController.checkRestriction(\\n        _receiver,\\n        currentGift.restrictions[_i].id,\\n        currentGift.restrictions[_i].args\\n      );\\n      if (!restrictionCheck) revert UnmetRestriction(currentGift.restrictions[_i].id);\\n      unchecked {\\n        _i++;\\n      }\\n    }\\n\\n    // Mark the gift as claimed\\n    allGifts[_giftID].claimed = true;\\n\\n    // Transfer NFTs to the recipient of the gift.\\n    _transferTokenBatch(address(this), _receiver, currentGift.tokens);\\n\\n    emit GiftClaimed(_giftID, _receiver);\\n  }\\n\\n  /**\\n   * @dev Get all unclaimed gifts created by a given address\\n   *\\n   * @return giftsTemp The list of all active unclaimedd gifts for caller's address\\n   *\\n   */\\n  function getUnclaimedGifts() external view returns (Gift[] memory giftsTemp) {\\n    giftsTemp = new Gift[](giftCounter);\\n    uint256 count;\\n    for (uint256 _i = 1; _i <= giftCounter; ) {\\n      unchecked {\\n        if (allGifts[_i].creator == _msgSender() && !allGifts[_i].claimed && !allGifts[_i].cancelled) {\\n          giftsTemp[count] = allGifts[_i];\\n          //giftsTemp[count].giftID = _i;\\n          count += 1;\\n        }\\n        _i++;\\n      }\\n    }\\n\\n    // solhint-disable no-inline-assembly\\n    assembly {\\n      mstore(giftsTemp, count)\\n    }\\n  }\\n\\n  /**\\n   * @dev Cancel a set of gifts\\n   *\\n   * Requirements:\\n   * - Valid _giftID[] list of unclaimed active gift\\n   *\\n   * @param _giftIDs[] array of gifts to be cancelled\\n   *\\n   */\\n  function cancelGifts(uint256[] calldata _giftIDs) external {\\n    uint256 arrayLength = _giftIDs.length;\\n    if (arrayLength == 0) revert InvalidGift();\\n    if (arrayLength > MAX_GIFTS_PER_CANCEL_TX) revert TooManyGiftsToCancel();\\n    for (uint256 _i = 0; _i < arrayLength; ) {\\n      unchecked {\\n        _cancelGift(_giftIDs[_i]);\\n        _i++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Cancel a gift created by a caller\\n   *\\n   * @param _giftID ID of a gift\\n   *\\n   */\\n  function _cancelGift(uint256 _giftID) internal validGift(_giftID) {\\n    Gift storage currentGift = allGifts[_giftID];\\n\\n    // Ensure that the gift can be cancelled\\n    if (currentGift.creator != _msgSender()) revert Unauthorized();\\n\\n    // Mark the gift as cancelled\\n    allGifts[_giftID].cancelled = true;\\n\\n    // Transfer the NFTs back to the gift creator\\n    _transferTokenBatch(address(this), currentGift.creator, currentGift.tokens);\\n\\n    emit GiftCancelled(_giftID);\\n  }\\n\\n  /**\\n   * @dev Transfers a token from one address to another.\\n   *\\n   * @param _from The address from which the token is transferred\\n   * @param _to The address to which the token is transferred\\n   * @param _token The token to be transferred\\n   */\\n  function _transferToken(address _from, address _to, Token memory _token) internal {\\n    if (_token.assetContract == CurrencyTransferLib.NATIVE_TOKEN || _token.assetContract.isERC20()) {\\n      CurrencyTransferLib.transferCurrencyWithWrapper(\\n        _token.assetContract,\\n        _from,\\n        _to,\\n        _token.amount,\\n        nativeTokenWrapper\\n      );\\n    } else if (_token.assetContract.isERC721()) {\\n      IERC721(_token.assetContract).safeTransferFrom(_from, _to, _token.tokenId);\\n    } else if (_token.assetContract.isERC1155()) {\\n      IERC1155(_token.assetContract).safeTransferFrom(_from, _to, _token.tokenId, _token.amount, \\\"\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfers a batch of tokens from one address to another.\\n   *\\n   * @param _from The address from which the tokens are transferred\\n   * @param _to The address to which the tokens are transferred\\n   * @param _tokens The array of tokens to be transferred\\n   * @return nativeTokenValue The total value of native tokens transferred (used for refunds)\\n   */\\n  function _transferTokenBatch(\\n    address _from,\\n    address _to,\\n    Token[] memory _tokens\\n  ) internal returns (uint256 nativeTokenValue) {\\n    uint256 _arrayLength = _tokens.length;\\n    for (uint256 i = 0; i < _arrayLength; ) {\\n      if (_to == address(this) && _tokens[i].assetContract == CurrencyTransferLib.NATIVE_TOKEN) {\\n        nativeTokenValue += _tokens[i].amount;\\n      } else {\\n        _transferToken(_from, _to, _tokens[i]);\\n      }\\n      unchecked {\\n        i++;\\n      }\\n    }\\n    if (nativeTokenValue != 0) {\\n      Token memory _nativeToken = Token({\\n        assetContract: CurrencyTransferLib.NATIVE_TOKEN,\\n        tokenId: 0,\\n        amount: nativeTokenValue\\n      });\\n      _transferToken(_from, _to, _nativeToken);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address of the signer of the given _giftID, _receiver and _signature.\\n   *\\n   * @param _giftID ID of a gift\\n   * @param _receiver Who should receive the gift\\n   * @param _signature The signature.\\n   * @return signer The address of the signer.\\n   */\\n  function getVerifier(\\n    uint256 _giftID,\\n    address _receiver,\\n    bytes calldata _signature\\n  ) private pure returns (address signer) {\\n    bytes32 messageHash = keccak256(abi.encodePacked(_giftID, _receiver));\\n    bytes32 ethSignedMessageHash = ECDSA.toEthSignedMessageHash(messageHash);\\n    signer = ECDSA.recover(ethSignedMessageHash, _signature);\\n  }\\n\\n  /**\\n   * @dev Emergency exit function to cancel all existing gifts and return the tokens to the gift creators.\\n   *\\n   */\\n  function emergencyExit() external onlyOwner {\\n    for (uint256 _i = 1; _i <= giftCounter; _i++) {\\n      if (!allGifts[_i].claimed && !allGifts[_i].cancelled) {\\n        _cancelGift(_i);\\n      }\\n    }\\n  }\\n\\n  /// @dev ERC2771Context overrides\\n  function _msgSender() internal view virtual override(Context, ERC2771Context) returns (address sender) {\\n    sender = ERC2771Context._msgSender();\\n  }\\n\\n  /// @dev ERC2771Context overrides\\n  function _msgData() internal view virtual override(Context, ERC2771Context) returns (bytes calldata) {\\n    return ERC2771Context._msgData();\\n  }\\n}\\n\",\"keccak256\":\"0xb81569e46970dac61b8606f28ae6f7bfca9d70dec782edec6e4fdead88365356\",\"license\":\"UNLICENSED\"},\"contracts/Interfaces/IGifts.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.21;\\n\\ninterface IGifts {\\n  /**\\n   * @dev Struct to represent a restriction on a gift.\\n   */\\n  struct Restriction {\\n    string id;\\n    bytes args;\\n  }\\n\\n  /**\\n   * @dev Struct to represent a token in a gift.\\n   */\\n  struct Token {\\n    address assetContract;\\n    uint256 tokenId;\\n    uint256 amount;\\n  }\\n\\n  /**\\n   * @dev Struct to represent a new gift payload.\\n   */\\n  struct NewGiftPayload {\\n    Token[] tokens;\\n    Restriction[] restrictions;\\n    address verifier;\\n  }\\n\\n  /**\\n   * @dev Struct to represent a gift.\\n   */\\n  struct Gift {\\n    uint256 giftID;\\n    uint256 createdAt; // Timestamp of when the Gift was created\\n    address creator; // Address of the Gift creator\\n    bool claimed; // Flag to track if the Gift has been claimed\\n    bool cancelled; // Flag to track if the Gift has been cancelled\\n    Restriction[] restrictions;\\n    Token[] tokens;\\n  }\\n\\n  // Custom error messages\\n  error GiftAlreadyCancelled();\\n  error GiftAlreadyClaimed();\\n  error InvalidGift();\\n  error Unauthorized();\\n  error InvalidVerifier();\\n  error InvalidControllerAddress();\\n  error InvalidRestriction();\\n  error TooManyRestrictions();\\n  error TooManyGiftsToCancel();\\n  error TooManyGifts();\\n  error TooManyTokens();\\n  error FailedtoRefundNativeToken();\\n  error UnmetRestriction(string restriction);\\n  error InvalidPayload(string message);\\n\\n  event GiftCreated(uint256 indexed _giftID, address _createdBy);\\n  event GiftClaimed(uint256 indexed _giftID, address _claimedBy);\\n  event GiftCancelled(uint256 indexed _giftID);\\n  event ControllerUpdated(address _restrictionController);\\n}\\n\",\"keccak256\":\"0xcc4b097bfe3438597bb0c54c641c8a5e4f841c7434aaddb2290b978361a0fc88\",\"license\":\"UNLICENSED\"},\"contracts/Interfaces/IRestrictionControl.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.21;\\n\\ninterface IRestrictionControl {\\n  function checkRestriction(\\n    address user,\\n    string calldata restriction,\\n    bytes calldata args\\n  ) external view returns (bool);\\n\\n  function isValidRestriction(string memory conditionName) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x583c61f2d280951aca35dd73e6c1dc6de6f13094e24726c9899796115d2dae26\",\"license\":\"UNLICENSED\"},\"contracts/Interfaces/IWRON.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.21;\\n\\ninterface IWRON {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf505ea6f41f36a41deabf61ff554f7f91c2de5977bb8ec06d4e0bda70bc26b08\",\"license\":\"UNLICENSED\"},\"contracts/lib/CurrencyTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// https://github.com/thirdweb-dev/contracts/blob/main/contracts/lib/CurrencyTransferLib.sol\\n/// @author thirdweb\\n\\n// Helper interfaces\\nimport {IWRON} from \\\"../Interfaces/IWRON.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary CurrencyTransferLib {\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev The address interpreted as native token of the chain.\\n  address public constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  error InsufficientBalance(uint256 available, uint256 required);\\n  error NativeTokenTransferFailed();\\n\\n  /// @dev Transfers a given amount of currency.\\n  function transferCurrency(address _currency, address _from, address _to, uint256 _amount) internal {\\n    if (_amount == 0) {\\n      return;\\n    }\\n\\n    if (_currency == NATIVE_TOKEN) {\\n      safeTransferNativeToken(_to, _amount);\\n    } else {\\n      safeTransferERC20(_currency, _from, _to, _amount);\\n    }\\n  }\\n\\n  /// @dev Transfers a given amount of currency. (With native token wrapping)\\n  function transferCurrencyWithWrapper(\\n    address _currency,\\n    address _from,\\n    address _to,\\n    uint256 _amount,\\n    address _nativeTokenWrapper\\n  ) internal {\\n    if (_amount == 0) {\\n      return;\\n    }\\n\\n    if (_currency == NATIVE_TOKEN) {\\n      if (_from == address(this)) {\\n        // withdraw from wron then transfer withdrawn native token to recipient\\n        IWRON(_nativeTokenWrapper).withdraw(_amount);\\n        safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n      } else if (_to == address(this)) {\\n        // store native currency in wron\\n        if (_amount > msg.value) revert InsufficientBalance({available: msg.value, required: _amount});\\n        IWRON(_nativeTokenWrapper).deposit{value: _amount}();\\n      } else {\\n        safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n      }\\n    } else {\\n      safeTransferERC20(_currency, _from, _to, _amount);\\n    }\\n  }\\n\\n  /// @dev Transfer `amount` of ERC20 token from `from` to `to`.\\n  function safeTransferERC20(address _currency, address _from, address _to, uint256 _amount) internal {\\n    if (_from == _to) {\\n      return;\\n    }\\n\\n    if (_from == address(this)) {\\n      IERC20(_currency).safeTransfer(_to, _amount);\\n    } else {\\n      IERC20(_currency).safeTransferFrom(_from, _to, _amount);\\n    }\\n  }\\n\\n  /// @dev Transfers `amount` of native token to `to`.\\n  function safeTransferNativeToken(address to, uint256 value) internal {\\n    // solhint-disable avoid-low-level-calls\\n    // slither-disable-next-line low-level-calls\\n    (bool success, ) = to.call{value: value}(\\\"\\\");\\n    if (!success) revert NativeTokenTransferFailed();\\n  }\\n\\n  /// @dev Transfers `amount` of native token to `to`. (With native token wrapping)\\n  function safeTransferNativeTokenWithWrapper(address to, uint256 value, address _nativeTokenWrapper) internal {\\n    // solhint-disable avoid-low-level-calls\\n    // slither-disable-next-line low-level-calls\\n    (bool success, ) = to.call{value: value}(\\\"\\\");\\n    if (!success) {\\n      IWRON(_nativeTokenWrapper).deposit{value: value}();\\n      IERC20(_nativeTokenWrapper).safeTransfer(to, value);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x31da22a7390b16d103bbb39a92129ee1703802dfb0b9ca2480ee3337cccedfb5\",\"license\":\"Apache-2.0\"},\"contracts/lib/InterfaceChecker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IRestrictionControl} from \\\"../Interfaces/IRestrictionControl.sol\\\";\\n\\n/**\\n * @title InterfaceChecker\\n * @dev Library for checking interface support\\n */\\nlibrary InterfaceChecker {\\n  /**\\n   * @dev Checks if the given address supports the IRestrictionControl interface.\\n   * @param check The address to check.\\n   * @return A boolean indicating if the address supports the IRestrictionControl interface.\\n   */\\n  function isRestrictionControl(address check) internal view returns (bool) {\\n    try IERC165(check).supportsInterface(type(IRestrictionControl).interfaceId) returns (bool isController) {\\n      return isController;\\n    } catch {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Checks if the given address supports the IERC1155 interface.\\n   * @param check The address to check.\\n   * @return A boolean indicating if the address supports the IERC1155 interface.\\n   */\\n  function isERC1155(address check) internal view returns (bool) {\\n    try IERC165(check).supportsInterface(type(IERC1155).interfaceId) returns (bool is1155) {\\n      return is1155;\\n    } catch {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Checks if the given address supports the IERC721 interface.\\n   * @param check The address to check.\\n   * @return A boolean indicating if the address supports the IERC721 interface.\\n   */\\n  function isERC721(address check) internal view returns (bool) {\\n    try IERC165(check).supportsInterface(type(IERC721).interfaceId) returns (bool is721) {\\n      return is721;\\n    } catch {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Checks if the given address supports the IERC20 interface.\\n   * @param check The address to check.\\n   * @return A boolean indicating if the address supports the IERC20 interface.\\n   */\\n  function isERC20(address check) internal view returns (bool) {\\n    if (isERC721(check)) {\\n      return false;\\n    }\\n\\n    try IERC20(check).balanceOf(address(0)) returns (uint256) {\\n      return true;\\n    } catch {\\n      return false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x94e851835be7a4fac5a6170e955662f18198a21661b04d6730570c244c32ef9e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620032943803806200329483398101604081905262000034916200012b565b60006080526200004d6200004762000076565b62000087565b6001600160a01b0391821660a052600180546001600160a01b0319169190921617905562000163565b600062000082620000d7565b905090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6080516000906001600160a01b031633148015620000f6575060143610155b1562000109575060131936013560601c90565b503390565b80516001600160a01b03811681146200012657600080fd5b919050565b600080604083850312156200013f57600080fd5b6200014a836200010e565b91506200015a602084016200010e565b90509250929050565b60805160a0516130fd620001976000396000818161012a0152611af70152600081816102bc015261120101526130fd6000f3fe6080604052600436106101235760003560e01c80638278d2ca116100a0578063e3e67bc111610064578063e3e67bc1146103cb578063efe92d4f146103e0578063f23a6e6114610402578063f2fde38b1461042e578063f818aed9146103cb57600080fd5b80638278d2ca146103415780638da5cb5b14610354578063bc197c811461037c578063c08d24c4146103a8578063c3d09b6c146103cb57600080fd5b80635641ec03116100e75780635641ec031461028a578063572b6c051461029f5780635ac66556146102ec578063715018a61461030c578063770873ad1461032157600080fd5b806301ffc9a7146101bc57806306cb5b66146101f1578063150b7a02146102115780632310370c1461024a5780633b0df0d71461025d57600080fd5b366101b7577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661015a61044e565b6001600160a01b0316146101b55760405162461bcd60e51b815260206004820181905260248201527f63616c6c6572206e6f74206e617469766520746f6b656e20777261707065722e60448201526064015b60405180910390fd5b005b600080fd5b3480156101c857600080fd5b506101dc6101d73660046124c4565b61045d565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b506101b561020c36600461250a565b610494565b34801561021d57600080fd5b5061023161022c3660046125dc565b610571565b6040516001600160e01b031990911681526020016101e8565b6101b5610258366004612647565b610582565b34801561026957600080fd5b5061027d61027836600461250a565b61066e565b6040516101e8919061280d565b34801561029657600080fd5b506101b5610928565b3480156102ab57600080fd5b506101dc6102ba36600461250a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b3480156102f857600080fd5b506101b5610307366004612820565b6109a1565b34801561031857600080fd5b506101b5610c47565b34801561032d57600080fd5b506101b561033c3660046128ec565b610c5b565b6101b561034f3660046128ec565b610cda565b34801561036057600080fd5b506000546040516001600160a01b0390911681526020016101e8565b34801561038857600080fd5b506102316103973660046129a1565b63bc197c8160e01b95945050505050565b3480156103b457600080fd5b506103bd600a81565b6040519081526020016101e8565b3480156103d757600080fd5b506103bd606481565b3480156103ec57600080fd5b506103f5610e19565b6040516101e89190612a4e565b34801561040e57600080fd5b5061023161041d366004612ab0565b63f23a6e6160e01b95945050505050565b34801561043a57600080fd5b506101b561044936600461250a565b611187565b60006104586111fd565b905090565b60006001600160e01b03198216630271189760e51b148061048e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61049c61124f565b806001600160a01b03163b6000036104c757604051631cf943f760e31b815260040160405180910390fd5b6104d9816001600160a01b03166112c8565b6104f657604051631cf943f760e31b815260040160405180910390fd5b6001600160a01b03811661051d57604051631cf943f760e31b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f1304018cfe79741dcf02ba6b61d39cc4757d59395d03224d9925c7aa830021469060200160405180910390a150565b630a85bd0160e11b5b949350505050565b3460008061058f8461133f565b909250905061059e8184612b2e565b925082156106235760006105b061044e565b6001600160a01b03168460405160006040518083038185875af1925050503d80600081146105fa576040519150601f19603f3d011682016040523d82523d6000602084013e6105ff565b606091505b5050905080610621576040516310dc860560e11b815260040160405180910390fd5b505b817f43a79fd36fcb8b47d4c508d7b908b17071296b2ff78d1dcced07087c9017f22861064d61044e565b6040516001600160a01b03909116815260200160405180910390a250505050565b61067661247a565b6001600160a01b038083166000908152600460209081526040808320548084526003808452828520835160e0810185528154815260018201548187015260028201549788168186015260ff600160a01b8904811615156060830152600160a81b909804909716151560808801529081018054845181870281018701909552808552929695919460a08701949391929084015b8282101561085e578382906000526020600020906002020160405180604001604052908160008201805461073b90612b41565b80601f016020809104026020016040519081016040528092919081815260200182805461076790612b41565b80156107b45780601f10610789576101008083540402835291602001916107b4565b820191906000526020600020905b81548152906001019060200180831161079757829003601f168201915b505050505081526020016001820180546107cd90612b41565b80601f01602080910402602001604051908101604052809291908181526020018280546107f990612b41565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b50505050508152505081526020019060010190610708565b50505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156108e0576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015491830191909152908352909201910161088b565b505050915250506000828152600360205260409020600201549092506001600160a01b031661092257604051632fde71b560e11b815260040160405180910390fd5b50919050565b61093061124f565b60015b600254811161099e57600081815260036020526040902060020154600160a01b900460ff1615801561097e5750600081815260036020526040902060020154600160a81b900460ff16155b1561098c5761098c816113e6565b8061099681612b75565b915050610933565b50565b836109ab8161150f565b60006109b9868686866115a6565b6001600160a01b03811660009081526004602052604090205490915086146109f45760405163baa3de5f60e01b815260040160405180910390fd5b600086815260036020526040902060028101546001600160a01b03808816911603610a31576040516282b42960e81b815260040160405180910390fd5b600381015460005b81811015610b56576001546003840180546000926001600160a01b03169163a8bdda04918c919086908110610a7057610a70612b8e565b9060005260206000209060020201600001876003018681548110610a9657610a96612b8e565b90600052602060002090600202016001016040518463ffffffff1660e01b8152600401610ac593929190612c21565b602060405180830381865afa158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b069190612c61565b905080610b4d57836003018281548110610b2257610b22612b8e565b90600052602060002090600202016000016040516377a938e960e01b81526004016101ac9190612c83565b50600101610a39565b506000888152600360209081526040808320600201805460ff60a01b1916600160a01b179055600485018054825181850281018501909352808352610bfe9430948d949392919084015b82821015610bf5576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101610ba0565b50505050611675565b506040516001600160a01b038816815288907fb8c591be1b81bbbab75d227e74047ce00d28805b341aea3327065d743a0b97c09060200160405180910390a25050505050505050565b610c4f61124f565b610c596000611789565b565b806000819003610c7e57604051632fde71b560e11b815260040160405180910390fd5b6064811115610ca057604051633b043d7160e01b815260040160405180910390fd5b60005b81811015610cd457610ccc848483818110610cc057610cc0612b8e565b905060200201356113e6565b600101610ca3565b50505050565b806064811115610cfd57604051635ec07a2160e11b815260040160405180910390fd5b3460005b82811015610d9057600080610d38878785818110610d2157610d21612b8e565b9050602002810190610d339190612c96565b61133f565b915091508084039350817f43a79fd36fcb8b47d4c508d7b908b17071296b2ff78d1dcced07087c9017f228610d6b61044e565b6040516001600160a01b03909116815260200160405180910390a25050600101610d01565b508015610cd4576000610da161044e565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610deb576040519150601f19603f3d011682016040523d82523d6000602084013e610df0565b606091505b5050905080610e12576040516310dc860560e11b815260040160405180910390fd5b5050505050565b60606002546001600160401b03811115610e3557610e35612527565b604051908082528060200260200182016040528015610e6e57816020015b610e5b61247a565b815260200190600190039081610e535790505b509050600060015b600254811161118157610e8761044e565b6000828152600360205260409020600201546001600160a01b039081169116148015610ecc5750600081815260036020526040902060020154600160a01b900460ff16155b8015610ef15750600081815260036020526040902060020154600160a81b900460ff16155b15611179576000818152600360208181526040808420815160e0810183528154815260018201548185015260028201546001600160a01b0381168285015260ff600160a01b8204811615156060840152600160a81b909104161515608082015293810180548351818602810186019094528084529495919460a08701949192909184015b828210156110cb5783829060005260206000209060020201604051806040016040529081600082018054610fa890612b41565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd490612b41565b80156110215780601f10610ff657610100808354040283529160200191611021565b820191906000526020600020905b81548152906001019060200180831161100457829003601f168201915b5050505050815260200160018201805461103a90612b41565b80601f016020809104026020016040519081016040528092919081815260200182805461106690612b41565b80156110b35780601f10611088576101008083540402835291602001916110b3565b820191906000526020600020905b81548152906001019060200180831161109657829003601f168201915b50505050508152505081526020019060010190610f75565b50505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561114d576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600180820154848601526002909101549183019190915290835290920191016110f8565b505050508152505083838151811061116757611167612b8e565b60200260200101819052506001820191505b600101610e76565b50815290565b61118f61124f565b6001600160a01b0381166111f45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101ac565b61099e81611789565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633148015611238575060143610155b1561124a575060131936013560601c90565b503390565b61125761044e565b6001600160a01b03166112726000546001600160a01b031690565b6001600160a01b031614610c595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101ac565b6040516301ffc9a760e01b815263666b763360e11b60048201526000906001600160a01b038316906301ffc9a7906024015b602060405180830381865afa925050508015611333575060408051601f3d908101601f1916820190925261133091810190612c61565b60015b61048e57506000919050565b60008061137161134f8480612cb6565b61135c6020870187612cfe565b61136c6060890160408a0161250a565b6117d9565b91506113df61137e61044e565b306113898680612cb6565b808060200260200160405190810160405280939291908181526020016000905b828210156113d5576113c660608302860136819003810190612d47565b815260200190600101906113a9565b5050505050611675565b9050915091565b806113f08161150f565b600082815260036020526040902061140661044e565b60028201546001600160a01b03908116911614611435576040516282b42960e81b815260040160405180910390fd5b60008381526003602090815260408083206002908101805460ff60a81b1916600160a81b1790558401546004850180548351818602810186019094528084526114de9530956001600160a01b039094169493840182821015610bf5576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101610ba0565b5060405183907fb0de3eab6b6ddc8846672c8103857e3205c92e806bf73ad25285a03a0857ffeb90600090a2505050565b60008181526003602052604090206002810154600160a81b900460ff161561154a576040516316a2a9c760e21b815260040160405180910390fd5b6002810154600160a01b900460ff161561157757604051630666013b60e01b815260040160405180910390fd5b60028101546001600160a01b03166115a257604051632fde71b560e11b815260040160405180910390fd5b5050565b60008085856040516020016115d792919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b6040516020818303038152906040528051906020012090506000611628827f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b905061166a8186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a8a92505050565b979650505050505050565b8051600090815b8181101561173f576001600160a01b038516301480156116de575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03168482815181106116c7576116c7612b8e565b6020026020010151600001516001600160a01b0316145b15611713578381815181106116f5576116f5612b8e565b6020026020010151604001518361170c9190612da8565b9250611737565b611737868686848151811061172a5761172a612b8e565b6020026020010151611aa6565b60010161167c565b508115611781576040805160608101825273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81526000602082015290810183905261177f868683611aa6565b505b509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b0382166118025760405163baa3de5f60e01b815260040160405180910390fd5b6001600160a01b038216600090815260046020526040902054156118395760405163baa3de5f60e01b815260040160405180910390fd5b84606481111561185c57604051633a4733d960e11b815260040160405180910390fd5b6002805485919060009061186f90612b75565b9182905550925060005b828110156118dc5760008481526003602052604090206004018989838181106118a4576118a4612b8e565b8354600181018555600094855260209094206060909102929092019260030290910190506118d28282612dbb565b5050600101611879565b508015611a2e57600a8111156119055760405163c636dd7f60e01b815260040160405180910390fd5b60005b81811015611a2c576001546001600160a01b031663646b366288888481811061193357611933612b8e565b90506020028101906119459190612df9565b61194f9080612e0f565b6040518363ffffffff1660e01b815260040161196c929190612e55565b602060405180830381865afa158015611989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ad9190612c61565b6119ca57604051632c3a71e360e21b815260040160405180910390fd5b6000848152600360208190526040909120018787838181106119ee576119ee612b8e565b9050602002810190611a009190612df9565b815460018101835560009283526020909220909160020201611a228282612f91565b5050600101611908565b505b611a3661044e565b60008481526003602090815260408083206002810180546001600160a01b0319166001600160a01b039687161790554260018201558790559690921681526004909152939093208290555095945050505050565b6000806000611a998585611c3e565b9150915061178181611c83565b80516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480611ae157508051611ae1906001600160a01b0316611dcd565b15611b2057611b1b8160000151848484604001517f0000000000000000000000000000000000000000000000000000000000000000611e5b565b505050565b8051611b34906001600160a01b0316611faa565b15611bb05780516020820151604051632142170760e11b81526001600160a01b038681166004830152858116602483015260448201929092529116906342842e0e90606401600060405180830381600087803b158015611b9357600080fd5b505af1158015611ba7573d6000803e3d6000fd5b50505050505050565b8051611bc4906001600160a01b0316611fe0565b15611b1b57805160208201516040808401519051637921219560e11b81526001600160a01b03878116600483015286811660248301526044820193909352606481019190915260a06084820152600060a482015291169063f242432a9060c401600060405180830381600087803b158015611b9357600080fd5b6000808251604103611c745760208301516040840151606085015160001a611c6887828585612016565b94509450505050611c7c565b506000905060025b9250929050565b6000816004811115611c9757611c97613073565b03611c9f5750565b6001816004811115611cb357611cb3613073565b03611d005760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016101ac565b6002816004811115611d1457611d14613073565b03611d615760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016101ac565b6003816004811115611d7557611d75613073565b0361099e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016101ac565b6000611dd882611faa565b15611de557506000919050565b6040516370a0823160e01b8152600060048201526001600160a01b038316906370a0823190602401602060405180830381865afa925050508015611e46575060408051601f3d908101601f19168201909252611e4391810190613089565b60015b611e5257506000919050565b50600192915050565b8115610e125773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03861601611f9e57306001600160a01b03851603611f0057604051632e1a7d4d60e01b8152600481018390526001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b158015611ed857600080fd5b505af1158015611eec573d6000803e3d6000fd5b50505050611efb8383836120da565b610e12565b306001600160a01b03841603611f935734821115611f3a5760405163cf47918160e01b8152346004820152602481018390526044016101ac565b806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015611f7557600080fd5b505af1158015611f89573d6000803e3d6000fd5b5050505050610e12565b611efb8383836120da565b610e128585858561219f565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526000906001600160a01b038316906301ffc9a7906024016112fa565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526000906001600160a01b038316906301ffc9a7906024016112fa565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561204d57506000905060036120d1565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156120a1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166120ca576000600192509250506120d1565b9150600090505b94509492505050565b6000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114612127576040519150601f19603f3d011682016040523d82523d6000602084013e61212c565b606091505b5050905080610cd457816001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561217057600080fd5b505af1158015612184573d6000803e3d6000fd5b50610cd4935050506001600160a01b038416905085856121f7565b816001600160a01b0316836001600160a01b03160315610cd457306001600160a01b038416036121e2576121dd6001600160a01b03851683836121f7565b610cd4565b610cd46001600160a01b03851684848461225a565b6040516001600160a01b038316602482015260448101829052611b1b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612292565b6040516001600160a01b0380851660248301528316604482015260648101829052610cd49085906323b872dd60e01b90608401612223565b60006122e7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123679092919063ffffffff16565b90508051600014806123085750808060200190518101906123089190612c61565b611b1b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101ac565b606061057a848460008585600080866001600160a01b0316858760405161238e91906130a2565b60006040518083038185875af1925050503d80600081146123cb576040519150601f19603f3d011682016040523d82523d6000602084013e6123d0565b606091505b509150915061166a878383876060831561244b578251600003612444576001600160a01b0385163b6124445760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101ac565b508161057a565b61057a83838151156124605781518083602001fd5b8060405162461bcd60e51b81526004016101ac91906130b4565b6040518060e00160405280600081526020016000815260200160006001600160a01b0316815260200160001515815260200160001515815260200160608152602001606081525090565b6000602082840312156124d657600080fd5b81356001600160e01b0319811681146124ee57600080fd5b9392505050565b6001600160a01b038116811461099e57600080fd5b60006020828403121561251c57600080fd5b81356124ee816124f5565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561256557612565612527565b604052919050565b600082601f83011261257e57600080fd5b81356001600160401b0381111561259757612597612527565b6125aa601f8201601f191660200161253d565b8181528460208386010111156125bf57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156125f257600080fd5b84356125fd816124f5565b9350602085013561260d816124f5565b92506040850135915060608501356001600160401b0381111561262f57600080fd5b61263b8782880161256d565b91505092959194509250565b60006020828403121561265957600080fd5b81356001600160401b0381111561266f57600080fd5b8201606081850312156124ee57600080fd5b60005b8381101561269c578181015183820152602001612684565b50506000910152565b600081518084526126bd816020860160208601612681565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b8381101561272057815180516001600160a01b03168852838101518489015260409081015190880152606090960195908201906001016126e5565b509495945050505050565b600060e083018251845260208084015181860152604060018060a01b0381860151168187015260608501511515606087015260808501511515608087015260a085015160e060a088015283815180865261010095508589019150858160051b8a01019550848301925060005b818110156127e75789870360ff19018352835180518689526127bb878a01826126a5565b918801518983038a8a01529190506127d381836126a5565b985050509285019291850191600101612797565b50505050505060c083015184820360c086015261280482826126d1565b95945050505050565b6020815260006124ee602083018461272b565b6000806000806060858703121561283657600080fd5b843593506020850135612848816124f5565b925060408501356001600160401b038082111561286457600080fd5b818701915087601f83011261287857600080fd5b81358181111561288757600080fd5b88602082850101111561289957600080fd5b95989497505060200194505050565b60008083601f8401126128ba57600080fd5b5081356001600160401b038111156128d157600080fd5b6020830191508360208260051b8501011115611c7c57600080fd5b600080602083850312156128ff57600080fd5b82356001600160401b0381111561291557600080fd5b612921858286016128a8565b90969095509350505050565b600082601f83011261293e57600080fd5b813560206001600160401b0382111561295957612959612527565b8160051b61296882820161253d565b928352848101820192828101908785111561298257600080fd5b83870192505b8483101561166a57823582529183019190830190612988565b600080600080600060a086880312156129b957600080fd5b85356129c4816124f5565b945060208601356129d4816124f5565b935060408601356001600160401b03808211156129f057600080fd5b6129fc89838a0161292d565b94506060880135915080821115612a1257600080fd5b612a1e89838a0161292d565b93506080880135915080821115612a3457600080fd5b50612a418882890161256d565b9150509295509295909350565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612aa357603f19888603018452612a9185835161272b565b94509285019290850190600101612a75565b5092979650505050505050565b600080600080600060a08688031215612ac857600080fd5b8535612ad3816124f5565b94506020860135612ae3816124f5565b9350604086013592506060860135915060808601356001600160401b03811115612b0c57600080fd5b612a418882890161256d565b634e487b7160e01b600052601160045260246000fd5b8181038181111561048e5761048e612b18565b600181811c90821680612b5557607f821691505b60208210810361092257634e487b7160e01b600052602260045260246000fd5b600060018201612b8757612b87612b18565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60008154612bb181612b41565b808552602060018381168015612bce5760018114612be857612c16565b60ff1985168884015283151560051b880183019550612c16565b866000528260002060005b85811015612c0e5781548a8201860152908301908401612bf3565b890184019650505b505050505092915050565b6001600160a01b0384168152606060208201819052600090612c4590830185612ba4565b8281036040840152612c578185612ba4565b9695505050505050565b600060208284031215612c7357600080fd5b815180151581146124ee57600080fd5b6020815260006124ee6020830184612ba4565b60008235605e19833603018112612cac57600080fd5b9190910192915050565b6000808335601e19843603018112612ccd57600080fd5b8301803591506001600160401b03821115612ce757600080fd5b6020019150606081023603821315611c7c57600080fd5b6000808335601e19843603018112612d1557600080fd5b8301803591506001600160401b03821115612d2f57600080fd5b6020019150600581901b3603821315611c7c57600080fd5b600060608284031215612d5957600080fd5b604051606081018181106001600160401b0382111715612d7b57612d7b612527565b6040528235612d89816124f5565b8152602083810135908201526040928301359281019290925250919050565b8082018082111561048e5761048e612b18565b8135612dc6816124f5565b81546001600160a01b0319166001600160a01b039190911617815560208201356001820155604090910135600290910155565b60008235603e19833603018112612cac57600080fd5b6000808335601e19843603018112612e2657600080fd5b8301803591506001600160401b03821115612e4057600080fd5b602001915036819003821315611c7c57600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b601f821115611b1b57600081815260208120601f850160051c81016020861015612eab5750805b601f850160051c820191505b81811015612eca57828155600101612eb7565b505050505050565b6001600160401b03831115612ee957612ee9612527565b612efd83612ef78354612b41565b83612e84565b6000601f841160018114612f315760008515612f195750838201355b600019600387901b1c1916600186901b178355610e12565b600083815260209020601f19861690835b82811015612f625786850135825560209485019460019092019101612f42565b5086821015612f7f5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b612f9b8283612e0f565b6001600160401b03811115612fb257612fb2612527565b612fc681612fc08554612b41565b85612e84565b6000601f821160018114612ffa5760008315612fe25750838201355b600019600385901b1c1916600184901b178555613054565b600085815260209020601f19841690835b8281101561302b578685013582556020948501946001909201910161300b565b50848210156130485760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506130656020830183612e0f565b610cd4818360018601612ed2565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561309b57600080fd5b5051919050565b60008251612cac818460208701612681565b6020815260006124ee60208301846126a556fea26469706673582212202812d94fd94a06ee06b3cf2a776ee7b0cea398953bdbc6d1e0cfd654e0ce77c864736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c80638278d2ca116100a0578063e3e67bc111610064578063e3e67bc1146103cb578063efe92d4f146103e0578063f23a6e6114610402578063f2fde38b1461042e578063f818aed9146103cb57600080fd5b80638278d2ca146103415780638da5cb5b14610354578063bc197c811461037c578063c08d24c4146103a8578063c3d09b6c146103cb57600080fd5b80635641ec03116100e75780635641ec031461028a578063572b6c051461029f5780635ac66556146102ec578063715018a61461030c578063770873ad1461032157600080fd5b806301ffc9a7146101bc57806306cb5b66146101f1578063150b7a02146102115780632310370c1461024a5780633b0df0d71461025d57600080fd5b366101b7577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661015a61044e565b6001600160a01b0316146101b55760405162461bcd60e51b815260206004820181905260248201527f63616c6c6572206e6f74206e617469766520746f6b656e20777261707065722e60448201526064015b60405180910390fd5b005b600080fd5b3480156101c857600080fd5b506101dc6101d73660046124c4565b61045d565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b506101b561020c36600461250a565b610494565b34801561021d57600080fd5b5061023161022c3660046125dc565b610571565b6040516001600160e01b031990911681526020016101e8565b6101b5610258366004612647565b610582565b34801561026957600080fd5b5061027d61027836600461250a565b61066e565b6040516101e8919061280d565b34801561029657600080fd5b506101b5610928565b3480156102ab57600080fd5b506101dc6102ba36600461250a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b3480156102f857600080fd5b506101b5610307366004612820565b6109a1565b34801561031857600080fd5b506101b5610c47565b34801561032d57600080fd5b506101b561033c3660046128ec565b610c5b565b6101b561034f3660046128ec565b610cda565b34801561036057600080fd5b506000546040516001600160a01b0390911681526020016101e8565b34801561038857600080fd5b506102316103973660046129a1565b63bc197c8160e01b95945050505050565b3480156103b457600080fd5b506103bd600a81565b6040519081526020016101e8565b3480156103d757600080fd5b506103bd606481565b3480156103ec57600080fd5b506103f5610e19565b6040516101e89190612a4e565b34801561040e57600080fd5b5061023161041d366004612ab0565b63f23a6e6160e01b95945050505050565b34801561043a57600080fd5b506101b561044936600461250a565b611187565b60006104586111fd565b905090565b60006001600160e01b03198216630271189760e51b148061048e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61049c61124f565b806001600160a01b03163b6000036104c757604051631cf943f760e31b815260040160405180910390fd5b6104d9816001600160a01b03166112c8565b6104f657604051631cf943f760e31b815260040160405180910390fd5b6001600160a01b03811661051d57604051631cf943f760e31b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f1304018cfe79741dcf02ba6b61d39cc4757d59395d03224d9925c7aa830021469060200160405180910390a150565b630a85bd0160e11b5b949350505050565b3460008061058f8461133f565b909250905061059e8184612b2e565b925082156106235760006105b061044e565b6001600160a01b03168460405160006040518083038185875af1925050503d80600081146105fa576040519150601f19603f3d011682016040523d82523d6000602084013e6105ff565b606091505b5050905080610621576040516310dc860560e11b815260040160405180910390fd5b505b817f43a79fd36fcb8b47d4c508d7b908b17071296b2ff78d1dcced07087c9017f22861064d61044e565b6040516001600160a01b03909116815260200160405180910390a250505050565b61067661247a565b6001600160a01b038083166000908152600460209081526040808320548084526003808452828520835160e0810185528154815260018201548187015260028201549788168186015260ff600160a01b8904811615156060830152600160a81b909804909716151560808801529081018054845181870281018701909552808552929695919460a08701949391929084015b8282101561085e578382906000526020600020906002020160405180604001604052908160008201805461073b90612b41565b80601f016020809104026020016040519081016040528092919081815260200182805461076790612b41565b80156107b45780601f10610789576101008083540402835291602001916107b4565b820191906000526020600020905b81548152906001019060200180831161079757829003601f168201915b505050505081526020016001820180546107cd90612b41565b80601f01602080910402602001604051908101604052809291908181526020018280546107f990612b41565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b50505050508152505081526020019060010190610708565b50505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156108e0576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015491830191909152908352909201910161088b565b505050915250506000828152600360205260409020600201549092506001600160a01b031661092257604051632fde71b560e11b815260040160405180910390fd5b50919050565b61093061124f565b60015b600254811161099e57600081815260036020526040902060020154600160a01b900460ff1615801561097e5750600081815260036020526040902060020154600160a81b900460ff16155b1561098c5761098c816113e6565b8061099681612b75565b915050610933565b50565b836109ab8161150f565b60006109b9868686866115a6565b6001600160a01b03811660009081526004602052604090205490915086146109f45760405163baa3de5f60e01b815260040160405180910390fd5b600086815260036020526040902060028101546001600160a01b03808816911603610a31576040516282b42960e81b815260040160405180910390fd5b600381015460005b81811015610b56576001546003840180546000926001600160a01b03169163a8bdda04918c919086908110610a7057610a70612b8e565b9060005260206000209060020201600001876003018681548110610a9657610a96612b8e565b90600052602060002090600202016001016040518463ffffffff1660e01b8152600401610ac593929190612c21565b602060405180830381865afa158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b069190612c61565b905080610b4d57836003018281548110610b2257610b22612b8e565b90600052602060002090600202016000016040516377a938e960e01b81526004016101ac9190612c83565b50600101610a39565b506000888152600360209081526040808320600201805460ff60a01b1916600160a01b179055600485018054825181850281018501909352808352610bfe9430948d949392919084015b82821015610bf5576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101610ba0565b50505050611675565b506040516001600160a01b038816815288907fb8c591be1b81bbbab75d227e74047ce00d28805b341aea3327065d743a0b97c09060200160405180910390a25050505050505050565b610c4f61124f565b610c596000611789565b565b806000819003610c7e57604051632fde71b560e11b815260040160405180910390fd5b6064811115610ca057604051633b043d7160e01b815260040160405180910390fd5b60005b81811015610cd457610ccc848483818110610cc057610cc0612b8e565b905060200201356113e6565b600101610ca3565b50505050565b806064811115610cfd57604051635ec07a2160e11b815260040160405180910390fd5b3460005b82811015610d9057600080610d38878785818110610d2157610d21612b8e565b9050602002810190610d339190612c96565b61133f565b915091508084039350817f43a79fd36fcb8b47d4c508d7b908b17071296b2ff78d1dcced07087c9017f228610d6b61044e565b6040516001600160a01b03909116815260200160405180910390a25050600101610d01565b508015610cd4576000610da161044e565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610deb576040519150601f19603f3d011682016040523d82523d6000602084013e610df0565b606091505b5050905080610e12576040516310dc860560e11b815260040160405180910390fd5b5050505050565b60606002546001600160401b03811115610e3557610e35612527565b604051908082528060200260200182016040528015610e6e57816020015b610e5b61247a565b815260200190600190039081610e535790505b509050600060015b600254811161118157610e8761044e565b6000828152600360205260409020600201546001600160a01b039081169116148015610ecc5750600081815260036020526040902060020154600160a01b900460ff16155b8015610ef15750600081815260036020526040902060020154600160a81b900460ff16155b15611179576000818152600360208181526040808420815160e0810183528154815260018201548185015260028201546001600160a01b0381168285015260ff600160a01b8204811615156060840152600160a81b909104161515608082015293810180548351818602810186019094528084529495919460a08701949192909184015b828210156110cb5783829060005260206000209060020201604051806040016040529081600082018054610fa890612b41565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd490612b41565b80156110215780601f10610ff657610100808354040283529160200191611021565b820191906000526020600020905b81548152906001019060200180831161100457829003601f168201915b5050505050815260200160018201805461103a90612b41565b80601f016020809104026020016040519081016040528092919081815260200182805461106690612b41565b80156110b35780601f10611088576101008083540402835291602001916110b3565b820191906000526020600020905b81548152906001019060200180831161109657829003601f168201915b50505050508152505081526020019060010190610f75565b50505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561114d576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600180820154848601526002909101549183019190915290835290920191016110f8565b505050508152505083838151811061116757611167612b8e565b60200260200101819052506001820191505b600101610e76565b50815290565b61118f61124f565b6001600160a01b0381166111f45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101ac565b61099e81611789565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633148015611238575060143610155b1561124a575060131936013560601c90565b503390565b61125761044e565b6001600160a01b03166112726000546001600160a01b031690565b6001600160a01b031614610c595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101ac565b6040516301ffc9a760e01b815263666b763360e11b60048201526000906001600160a01b038316906301ffc9a7906024015b602060405180830381865afa925050508015611333575060408051601f3d908101601f1916820190925261133091810190612c61565b60015b61048e57506000919050565b60008061137161134f8480612cb6565b61135c6020870187612cfe565b61136c6060890160408a0161250a565b6117d9565b91506113df61137e61044e565b306113898680612cb6565b808060200260200160405190810160405280939291908181526020016000905b828210156113d5576113c660608302860136819003810190612d47565b815260200190600101906113a9565b5050505050611675565b9050915091565b806113f08161150f565b600082815260036020526040902061140661044e565b60028201546001600160a01b03908116911614611435576040516282b42960e81b815260040160405180910390fd5b60008381526003602090815260408083206002908101805460ff60a81b1916600160a81b1790558401546004850180548351818602810186019094528084526114de9530956001600160a01b039094169493840182821015610bf5576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101610ba0565b5060405183907fb0de3eab6b6ddc8846672c8103857e3205c92e806bf73ad25285a03a0857ffeb90600090a2505050565b60008181526003602052604090206002810154600160a81b900460ff161561154a576040516316a2a9c760e21b815260040160405180910390fd5b6002810154600160a01b900460ff161561157757604051630666013b60e01b815260040160405180910390fd5b60028101546001600160a01b03166115a257604051632fde71b560e11b815260040160405180910390fd5b5050565b60008085856040516020016115d792919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b6040516020818303038152906040528051906020012090506000611628827f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b905061166a8186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a8a92505050565b979650505050505050565b8051600090815b8181101561173f576001600160a01b038516301480156116de575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03168482815181106116c7576116c7612b8e565b6020026020010151600001516001600160a01b0316145b15611713578381815181106116f5576116f5612b8e565b6020026020010151604001518361170c9190612da8565b9250611737565b611737868686848151811061172a5761172a612b8e565b6020026020010151611aa6565b60010161167c565b508115611781576040805160608101825273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81526000602082015290810183905261177f868683611aa6565b505b509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b0382166118025760405163baa3de5f60e01b815260040160405180910390fd5b6001600160a01b038216600090815260046020526040902054156118395760405163baa3de5f60e01b815260040160405180910390fd5b84606481111561185c57604051633a4733d960e11b815260040160405180910390fd5b6002805485919060009061186f90612b75565b9182905550925060005b828110156118dc5760008481526003602052604090206004018989838181106118a4576118a4612b8e565b8354600181018555600094855260209094206060909102929092019260030290910190506118d28282612dbb565b5050600101611879565b508015611a2e57600a8111156119055760405163c636dd7f60e01b815260040160405180910390fd5b60005b81811015611a2c576001546001600160a01b031663646b366288888481811061193357611933612b8e565b90506020028101906119459190612df9565b61194f9080612e0f565b6040518363ffffffff1660e01b815260040161196c929190612e55565b602060405180830381865afa158015611989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ad9190612c61565b6119ca57604051632c3a71e360e21b815260040160405180910390fd5b6000848152600360208190526040909120018787838181106119ee576119ee612b8e565b9050602002810190611a009190612df9565b815460018101835560009283526020909220909160020201611a228282612f91565b5050600101611908565b505b611a3661044e565b60008481526003602090815260408083206002810180546001600160a01b0319166001600160a01b039687161790554260018201558790559690921681526004909152939093208290555095945050505050565b6000806000611a998585611c3e565b9150915061178181611c83565b80516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480611ae157508051611ae1906001600160a01b0316611dcd565b15611b2057611b1b8160000151848484604001517f0000000000000000000000000000000000000000000000000000000000000000611e5b565b505050565b8051611b34906001600160a01b0316611faa565b15611bb05780516020820151604051632142170760e11b81526001600160a01b038681166004830152858116602483015260448201929092529116906342842e0e90606401600060405180830381600087803b158015611b9357600080fd5b505af1158015611ba7573d6000803e3d6000fd5b50505050505050565b8051611bc4906001600160a01b0316611fe0565b15611b1b57805160208201516040808401519051637921219560e11b81526001600160a01b03878116600483015286811660248301526044820193909352606481019190915260a06084820152600060a482015291169063f242432a9060c401600060405180830381600087803b158015611b9357600080fd5b6000808251604103611c745760208301516040840151606085015160001a611c6887828585612016565b94509450505050611c7c565b506000905060025b9250929050565b6000816004811115611c9757611c97613073565b03611c9f5750565b6001816004811115611cb357611cb3613073565b03611d005760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016101ac565b6002816004811115611d1457611d14613073565b03611d615760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016101ac565b6003816004811115611d7557611d75613073565b0361099e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016101ac565b6000611dd882611faa565b15611de557506000919050565b6040516370a0823160e01b8152600060048201526001600160a01b038316906370a0823190602401602060405180830381865afa925050508015611e46575060408051601f3d908101601f19168201909252611e4391810190613089565b60015b611e5257506000919050565b50600192915050565b8115610e125773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03861601611f9e57306001600160a01b03851603611f0057604051632e1a7d4d60e01b8152600481018390526001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b158015611ed857600080fd5b505af1158015611eec573d6000803e3d6000fd5b50505050611efb8383836120da565b610e12565b306001600160a01b03841603611f935734821115611f3a5760405163cf47918160e01b8152346004820152602481018390526044016101ac565b806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015611f7557600080fd5b505af1158015611f89573d6000803e3d6000fd5b5050505050610e12565b611efb8383836120da565b610e128585858561219f565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526000906001600160a01b038316906301ffc9a7906024016112fa565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526000906001600160a01b038316906301ffc9a7906024016112fa565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561204d57506000905060036120d1565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156120a1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166120ca576000600192509250506120d1565b9150600090505b94509492505050565b6000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114612127576040519150601f19603f3d011682016040523d82523d6000602084013e61212c565b606091505b5050905080610cd457816001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561217057600080fd5b505af1158015612184573d6000803e3d6000fd5b50610cd4935050506001600160a01b038416905085856121f7565b816001600160a01b0316836001600160a01b03160315610cd457306001600160a01b038416036121e2576121dd6001600160a01b03851683836121f7565b610cd4565b610cd46001600160a01b03851684848461225a565b6040516001600160a01b038316602482015260448101829052611b1b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612292565b6040516001600160a01b0380851660248301528316604482015260648101829052610cd49085906323b872dd60e01b90608401612223565b60006122e7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123679092919063ffffffff16565b90508051600014806123085750808060200190518101906123089190612c61565b611b1b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101ac565b606061057a848460008585600080866001600160a01b0316858760405161238e91906130a2565b60006040518083038185875af1925050503d80600081146123cb576040519150601f19603f3d011682016040523d82523d6000602084013e6123d0565b606091505b509150915061166a878383876060831561244b578251600003612444576001600160a01b0385163b6124445760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101ac565b508161057a565b61057a83838151156124605781518083602001fd5b8060405162461bcd60e51b81526004016101ac91906130b4565b6040518060e00160405280600081526020016000815260200160006001600160a01b0316815260200160001515815260200160001515815260200160608152602001606081525090565b6000602082840312156124d657600080fd5b81356001600160e01b0319811681146124ee57600080fd5b9392505050565b6001600160a01b038116811461099e57600080fd5b60006020828403121561251c57600080fd5b81356124ee816124f5565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561256557612565612527565b604052919050565b600082601f83011261257e57600080fd5b81356001600160401b0381111561259757612597612527565b6125aa601f8201601f191660200161253d565b8181528460208386010111156125bf57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156125f257600080fd5b84356125fd816124f5565b9350602085013561260d816124f5565b92506040850135915060608501356001600160401b0381111561262f57600080fd5b61263b8782880161256d565b91505092959194509250565b60006020828403121561265957600080fd5b81356001600160401b0381111561266f57600080fd5b8201606081850312156124ee57600080fd5b60005b8381101561269c578181015183820152602001612684565b50506000910152565b600081518084526126bd816020860160208601612681565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b8381101561272057815180516001600160a01b03168852838101518489015260409081015190880152606090960195908201906001016126e5565b509495945050505050565b600060e083018251845260208084015181860152604060018060a01b0381860151168187015260608501511515606087015260808501511515608087015260a085015160e060a088015283815180865261010095508589019150858160051b8a01019550848301925060005b818110156127e75789870360ff19018352835180518689526127bb878a01826126a5565b918801518983038a8a01529190506127d381836126a5565b985050509285019291850191600101612797565b50505050505060c083015184820360c086015261280482826126d1565b95945050505050565b6020815260006124ee602083018461272b565b6000806000806060858703121561283657600080fd5b843593506020850135612848816124f5565b925060408501356001600160401b038082111561286457600080fd5b818701915087601f83011261287857600080fd5b81358181111561288757600080fd5b88602082850101111561289957600080fd5b95989497505060200194505050565b60008083601f8401126128ba57600080fd5b5081356001600160401b038111156128d157600080fd5b6020830191508360208260051b8501011115611c7c57600080fd5b600080602083850312156128ff57600080fd5b82356001600160401b0381111561291557600080fd5b612921858286016128a8565b90969095509350505050565b600082601f83011261293e57600080fd5b813560206001600160401b0382111561295957612959612527565b8160051b61296882820161253d565b928352848101820192828101908785111561298257600080fd5b83870192505b8483101561166a57823582529183019190830190612988565b600080600080600060a086880312156129b957600080fd5b85356129c4816124f5565b945060208601356129d4816124f5565b935060408601356001600160401b03808211156129f057600080fd5b6129fc89838a0161292d565b94506060880135915080821115612a1257600080fd5b612a1e89838a0161292d565b93506080880135915080821115612a3457600080fd5b50612a418882890161256d565b9150509295509295909350565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612aa357603f19888603018452612a9185835161272b565b94509285019290850190600101612a75565b5092979650505050505050565b600080600080600060a08688031215612ac857600080fd5b8535612ad3816124f5565b94506020860135612ae3816124f5565b9350604086013592506060860135915060808601356001600160401b03811115612b0c57600080fd5b612a418882890161256d565b634e487b7160e01b600052601160045260246000fd5b8181038181111561048e5761048e612b18565b600181811c90821680612b5557607f821691505b60208210810361092257634e487b7160e01b600052602260045260246000fd5b600060018201612b8757612b87612b18565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60008154612bb181612b41565b808552602060018381168015612bce5760018114612be857612c16565b60ff1985168884015283151560051b880183019550612c16565b866000528260002060005b85811015612c0e5781548a8201860152908301908401612bf3565b890184019650505b505050505092915050565b6001600160a01b0384168152606060208201819052600090612c4590830185612ba4565b8281036040840152612c578185612ba4565b9695505050505050565b600060208284031215612c7357600080fd5b815180151581146124ee57600080fd5b6020815260006124ee6020830184612ba4565b60008235605e19833603018112612cac57600080fd5b9190910192915050565b6000808335601e19843603018112612ccd57600080fd5b8301803591506001600160401b03821115612ce757600080fd5b6020019150606081023603821315611c7c57600080fd5b6000808335601e19843603018112612d1557600080fd5b8301803591506001600160401b03821115612d2f57600080fd5b6020019150600581901b3603821315611c7c57600080fd5b600060608284031215612d5957600080fd5b604051606081018181106001600160401b0382111715612d7b57612d7b612527565b6040528235612d89816124f5565b8152602083810135908201526040928301359281019290925250919050565b8082018082111561048e5761048e612b18565b8135612dc6816124f5565b81546001600160a01b0319166001600160a01b039190911617815560208201356001820155604090910135600290910155565b60008235603e19833603018112612cac57600080fd5b6000808335601e19843603018112612e2657600080fd5b8301803591506001600160401b03821115612e4057600080fd5b602001915036819003821315611c7c57600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b601f821115611b1b57600081815260208120601f850160051c81016020861015612eab5750805b601f850160051c820191505b81811015612eca57828155600101612eb7565b505050505050565b6001600160401b03831115612ee957612ee9612527565b612efd83612ef78354612b41565b83612e84565b6000601f841160018114612f315760008515612f195750838201355b600019600387901b1c1916600186901b178355610e12565b600083815260209020601f19861690835b82811015612f625786850135825560209485019460019092019101612f42565b5086821015612f7f5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b612f9b8283612e0f565b6001600160401b03811115612fb257612fb2612527565b612fc681612fc08554612b41565b85612e84565b6000601f821160018114612ffa5760008315612fe25750838201355b600019600385901b1c1916600184901b178555613054565b600085815260209020601f19841690835b8281101561302b578685013582556020948501946001909201910161300b565b50848210156130485760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506130656020830183612e0f565b610cd4818360018601612ed2565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561309b57600080fd5b5051919050565b60008251612cac818460208701612681565b6020815260006124ee60208301846126a556fea26469706673582212202812d94fd94a06ee06b3cf2a776ee7b0cea398953bdbc6d1e0cfd654e0ce77c864736f6c63430008150033",
  "devdoc": {
    "author": "dw",
    "details": "Allows trustlessly give ERC20/ERC721/ERC1115/RON (aka 'Token') gifts to not yet known recepients.",
    "kind": "dev",
    "methods": {
      "cancelGifts(uint256[])": {
        "details": "Cancel a set of gifts Requirements: - Valid _giftID[] list of unclaimed active gift",
        "params": {
          "_giftIDs": "[] array of gifts to be cancelled"
        }
      },
      "claimGift(uint256,address,bytes)": {
        "details": "Claims a gift using its secret and a signed message from the recipient. Requirements: - Valid _giftID and verified _signature of unclaimed gift",
        "params": {
          "_giftID": "ID of a gift",
          "_receiver": "Who should receive the gift",
          "_signature": "The signed message from the recipient of the gift."
        }
      },
      "constructor": {
        "details": "Constructor function",
        "params": {
          "_nativeTokenWrapper": "The address of the native token wrapper contract",
          "_restrictionController": "The address of the access control contract"
        }
      },
      "createGift(((address,uint256,uint256)[],(string,bytes)[],address))": {
        "details": "Creates a single gift in the specified payload",
        "params": {
          "_newGift": "The payload containing the gift information"
        }
      },
      "createGifts(((address,uint256,uint256)[],(string,bytes)[],address)[])": {
        "details": "Creates multiple gifts in the specified payload array",
        "params": {
          "_newGift": "The payloads containing the gift information"
        }
      },
      "emergencyExit()": {
        "details": "Emergency exit function to cancel all existing gifts and return the tokens to the gift creators."
      },
      "getGift(address)": {
        "details": "Retrieves the gift by using verifier address",
        "params": {
          "_verifier": "Verifier address"
        },
        "returns": {
          "currentGift": "The information of the gift"
        }
      },
      "getUnclaimedGifts()": {
        "details": "Get all unclaimed gifts created by a given address",
        "returns": {
          "giftsTemp": "The list of all active unclaimedd gifts for caller's address"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateController(address)": {
        "details": "Set the restriction controller contract address",
        "params": {
          "_restrictionController": "The address of the valid contract"
        }
      }
    },
    "title": "Token Gifting Smart Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "updateController(address)": {
        "notice": "Need to make sure the restriction controller is correct"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1045,
        "contract": "contracts/Gifts.sol:Gifts",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8687,
        "contract": "contracts/Gifts.sol:Gifts",
        "label": "restrictionController",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRestrictionControl)9895"
      },
      {
        "astId": 8703,
        "contract": "contracts/Gifts.sol:Gifts",
        "label": "giftCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8708,
        "contract": "contracts/Gifts.sol:Gifts",
        "label": "allGifts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Gift)9821_storage)"
      },
      {
        "astId": 8712,
        "contract": "contracts/Gifts.sol:Gifts",
        "label": "allVerifiers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Restriction)9781_storage)dyn_storage": {
        "base": "t_struct(Restriction)9781_storage",
        "encoding": "dynamic_array",
        "label": "struct IGifts.Restriction[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Token)9789_storage)dyn_storage": {
        "base": "t_struct(Token)9789_storage",
        "encoding": "dynamic_array",
        "label": "struct IGifts.Token[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IRestrictionControl)9895": {
        "encoding": "inplace",
        "label": "contract IRestrictionControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Gift)9821_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IGifts.Gift)",
        "numberOfBytes": "32",
        "value": "t_struct(Gift)9821_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Gift)9821_storage": {
        "encoding": "inplace",
        "label": "struct IGifts.Gift",
        "members": [
          {
            "astId": 9804,
            "contract": "contracts/Gifts.sol:Gifts",
            "label": "giftID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9806,
            "contract": "contracts/Gifts.sol:Gifts",
            "label": "createdAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9808,
            "contract": "contracts/Gifts.sol:Gifts",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 9810,
            "contract": "contracts/Gifts.sol:Gifts",
            "label": "claimed",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 9812,
            "contract": "contracts/Gifts.sol:Gifts",
            "label": "cancelled",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 9816,
            "contract": "contracts/Gifts.sol:Gifts",
            "label": "restrictions",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(Restriction)9781_storage)dyn_storage"
          },
          {
            "astId": 9820,
            "contract": "contracts/Gifts.sol:Gifts",
            "label": "tokens",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(Token)9789_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Restriction)9781_storage": {
        "encoding": "inplace",
        "label": "struct IGifts.Restriction",
        "members": [
          {
            "astId": 9778,
            "contract": "contracts/Gifts.sol:Gifts",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 9780,
            "contract": "contracts/Gifts.sol:Gifts",
            "label": "args",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Token)9789_storage": {
        "encoding": "inplace",
        "label": "struct IGifts.Token",
        "members": [
          {
            "astId": 9784,
            "contract": "contracts/Gifts.sol:Gifts",
            "label": "assetContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9786,
            "contract": "contracts/Gifts.sol:Gifts",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9788,
            "contract": "contracts/Gifts.sol:Gifts",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}