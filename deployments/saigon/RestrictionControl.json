{
  "address": "0x169106769462cC1DC488753323821aBc11113b3a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_atiaShrine",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "checkRestriction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "hasBlessingStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "hasBlessingStreak",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "hasRonBalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "hasTokenBalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "isBlessingActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "isBlessingInactive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        }
      ],
      "name": "isValidRestriction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7b6145667298384001c731ed0ff9e08c6ec25a9f38741c6ca5e912a91456aa9",
  "receipt": {
    "to": null,
    "from": "0x0DC7a2A26b12E1d14351E2c6dA806d0f8bce5CDf",
    "contractAddress": "0x169106769462cC1DC488753323821aBc11113b3a",
    "transactionIndex": 0,
    "gasUsed": "668745",
    "logsBloom": "0x
    "blockHash": "0xcbe3500133dd9dcda0d6a29d557ad5b66512c30218b4f91c6c1483f77c090dda",
    "transactionHash": "0xb7b6145667298384001c731ed0ff9e08c6ec25a9f38741c6ca5e912a91456aa9",
    "logs": [],
    "blockNumber": 21055915,
    "cumulativeGasUsed": "668745",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd5c5afefad9ea288acbaaebeacec5225dd3d6d2b"
  ],
  "numDeployments": 1,
  "solcInputHash": "262893efc35459e8ef8708a72995fc26",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_atiaShrine\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"checkRestriction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"hasBlessingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"hasBlessingStreak\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"hasRonBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"hasTokenBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isBlessingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isBlessingInactive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"isValidRestriction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for managing restrictions for creating and claiming gifts\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"checkRestriction(address,string,bytes)\":{\"details\":\"Checks if a user satisfies a specific restriction.\",\"params\":{\"args\":\"Additional arguments for the restriction.\",\"id\":\"The ID of the restriction.\",\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"A boolean indicating if the user satisfies the restriction.\"}},\"hasBlessingStatus(address,bytes)\":{\"details\":\"Checks if a user has a specific Atia's blessing status.\",\"params\":{\"args\":\"Additional arguments for the restriction.\",\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"A boolean indicating if the user has the requested blessing status.\"}},\"hasBlessingStreak(address,bytes)\":{\"details\":\"Checks if a user has a blessing streak greater than a minimum amount.\",\"params\":{\"args\":\"Additional arguments for the restriction.\",\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"A boolean indicating if the user has a blessing streak greater than the minimum amount.\"}},\"hasRonBalance(address,bytes)\":{\"details\":\"Checks if a user's balance of RON tokens is greater than a minimum amount.\",\"params\":{\"args\":\"Additional arguments for the restriction.\",\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"A boolean indicating if the user's RON token balance is greater than the minimum amount.\"}},\"hasTokenBalance(address,bytes)\":{\"details\":\"Checks if a user's balance of a specific token is greater than a minimum amount.\",\"params\":{\"args\":\"Additional arguments for the restriction.\",\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"A boolean indicating if the user's token balance is greater than the minimum amount.\"}},\"isBlessingActive(address,bytes)\":{\"details\":\"Checks if a user's blessing is currently active.\",\"params\":{\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"A boolean indicating if the user's blessing is active.\"}},\"isBlessingInactive(address,bytes)\":{\"details\":\"Checks if a user's blessing is currently inactive.\",\"params\":{\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"A boolean indicating if the user's blessing is inactive.\"}},\"isValidRestriction(string)\":{\"details\":\"Checks if a restriction with the given ID exists.\",\"params\":{\"id\":\"The ID of the restriction.\"},\"returns\":{\"_0\":\"A boolean indicating if the restriction exists.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"RestrictionControl\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RestrictionControl/RestrictionControl.sol\":\"RestrictionControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Interfaces/IAtiaShrine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.21;\\n\\ninterface IAtiaShrine {\\n  function activateStreak() external;\\n\\n  function getStreak(address _user) external view returns (uint256 streakAmount, uint256 lastActivated);\\n\\n  function hasCurrentlyActivated(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x07cb48600f77634b7765dc113820ac3568d254e368e85775d766e37a915fd34a\",\"license\":\"UNLICENSED\"},\"contracts/Interfaces/IRestrictionControl.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.21;\\n\\ninterface IRestrictionControl {\\n  function checkRestriction(\\n    address user,\\n    string calldata restriction,\\n    bytes calldata args\\n  ) external view returns (bool);\\n\\n  function isValidRestriction(string memory conditionName) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x583c61f2d280951aca35dd73e6c1dc6de6f13094e24726c9899796115d2dae26\",\"license\":\"UNLICENSED\"},\"contracts/Interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.21;\\n\\ninterface IToken {\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2da9d4a698fdd846394fe64e7ed032b884e4b13998ccdc8ee6f9770aaf214184\",\"license\":\"UNLICENSED\"},\"contracts/RestrictionControl/RestrictionControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IAtiaShrine} from \\\"../Interfaces/IAtiaShrine.sol\\\";\\nimport {IToken} from \\\"../Interfaces/IToken.sol\\\";\\nimport {IRestrictionControl} from \\\"../Interfaces/IRestrictionControl.sol\\\";\\n\\n/**\\n * @title RestrictionControl\\n * @dev Contract for managing restrictions for creating and claiming gifts\\n */\\ncontract RestrictionControl is Initializable, IRestrictionControl, ERC165 {\\n  IAtiaShrine private atiaShrineContract;\\n\\n  struct Restriction {\\n    function(address, bytes memory) view returns (bool) conditionFunction;\\n    bool exists;\\n  }\\n\\n  mapping(string => Restriction) internal conditions;\\n\\n  constructor(address _atiaShrine) {\\n    atiaShrineContract = IAtiaShrine(_atiaShrine);\\n\\n    conditions[\\\"hasBlessingStatus\\\"] = Restriction(hasBlessingStatus, true);\\n    conditions[\\\"isBlessingActive\\\"] = Restriction(isBlessingActive, true);\\n    conditions[\\\"isBlessingInactive\\\"] = Restriction(isBlessingInactive, true);\\n    conditions[\\\"hasBlessingStreak\\\"] = Restriction(hasBlessingStreak, true);\\n    conditions[\\\"hasRonBalance\\\"] = Restriction(hasRonBalance, true);\\n    conditions[\\\"hasTokenBalance\\\"] = Restriction(hasTokenBalance, true);\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IRestrictionControl).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Checks if a user satisfies a specific restriction.\\n   * @param user The address of the user.\\n   * @param id The ID of the restriction.\\n   * @param args Additional arguments for the restriction.\\n   * @return A boolean indicating if the user satisfies the restriction.\\n   */\\n  function checkRestriction(address user, string memory id, bytes memory args) public view returns (bool) {\\n    return conditions[id].conditionFunction(user, args);\\n  }\\n\\n  /**\\n   * @dev Checks if a restriction with the given ID exists.\\n   * @param id The ID of the restriction.\\n   * @return A boolean indicating if the restriction exists.\\n   */\\n  function isValidRestriction(string memory id) public view returns (bool) {\\n    return conditions[id].exists;\\n  }\\n\\n  /**\\n   * @dev Checks if a user has a specific Atia's blessing status.\\n   * @param user The address of the user.\\n   * @param args Additional arguments for the restriction.\\n   * @return A boolean indicating if the user has the requested blessing status.\\n   */\\n  function hasBlessingStatus(address user, bytes memory args) public view returns (bool) {\\n    bool requestedStatus = abi.decode(args, (bool));\\n    bool blessingStatus = atiaShrineContract.hasCurrentlyActivated(user);\\n    return blessingStatus == requestedStatus;\\n  }\\n\\n  /**\\n   * @dev Checks if a user's blessing is currently active.\\n   * @param user The address of the user.\\n   * @return A boolean indicating if the user's blessing is active.\\n   */\\n  function isBlessingActive(address user, bytes memory) public view returns (bool) {\\n    bool blessingStatus = atiaShrineContract.hasCurrentlyActivated(user);\\n    return blessingStatus;\\n  }\\n\\n  /**\\n   * @dev Checks if a user's blessing is currently inactive.\\n   * @param user The address of the user.\\n   * @return A boolean indicating if the user's blessing is inactive.\\n   */\\n  function isBlessingInactive(address user, bytes memory) public view returns (bool) {\\n    bool blessingStatus = atiaShrineContract.hasCurrentlyActivated(user);\\n    return !blessingStatus;\\n  }\\n\\n  /**\\n   * @dev Checks if a user has a blessing streak greater than a minimum amount.\\n   * @param user The address of the user.\\n   * @param args Additional arguments for the restriction.\\n   * @return A boolean indicating if the user has a blessing streak greater than the minimum amount.\\n   */\\n  function hasBlessingStreak(address user, bytes memory args) public view returns (bool) {\\n    uint256 minAmount = abi.decode(args, (uint256));\\n    (uint256 streakAmount, ) = atiaShrineContract.getStreak(user);\\n    return streakAmount > minAmount;\\n  }\\n\\n  /**\\n   * @dev Checks if a user's balance of RON tokens is greater than a minimum amount.\\n   * @param user The address of the user.\\n   * @param args Additional arguments for the restriction.\\n   * @return A boolean indicating if the user's RON token balance is greater than the minimum amount.\\n   */\\n  function hasRonBalance(address user, bytes memory args) public view returns (bool) {\\n    uint256 minAmount = abi.decode(args, (uint256));\\n    return user.balance > minAmount;\\n  }\\n\\n  /**\\n   * @dev Checks if a user's balance of a specific token is greater than a minimum amount.\\n   * @param user The address of the user.\\n   * @param args Additional arguments for the restriction.\\n   * @return A boolean indicating if the user's token balance is greater than the minimum amount.\\n   */\\n  function hasTokenBalance(address user, bytes memory args) public view returns (bool) {\\n    (address token, uint256 minAmount) = abi.decode(args, (address, uint256));\\n    return IToken(token).balanceOf(user) > minAmount;\\n  }\\n}\\n\",\"keccak256\":\"0x6ad4d002dd471bbb8d1c7d27f28ff7dc90ba68366732e39292b14b9b61145e7a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000f8538038062000f858339810160408190526200003491620006c9565b80600060026101000a8154816001600160a01b0302191690836001600160a01b0316021790555060405180604001604052806200039f60201b6200018e176001600160401b03168152602001600115158152506001604051620000ae9070686173426c657373696e6753746174757360781b815260110190565b9081526040805191829003602090810183208451815495830151151568010000000000000000026001600160481b03199096166001600160401b039182161795909517905582820182526200045762000446821b17909316825260019282018390525190919062000135906f6973426c657373696e6741637469766560801b815260100190565b9081526040805191829003602090810183208451815495830151151568010000000000000000026001600160481b03199096166001600160401b0391821617959095179055828201825262000399620004c6821b179093168252600192820183905251909190620001be90716973426c657373696e67496e61637469766560701b815260120190565b9081526040805191829003602090810183208451815495830151151568010000000000000000026001600160481b03199096166001600160401b03918216179590951790558282018252620002fd62000547821b179093168252600192820183905251909190620002469070686173426c657373696e6753747265616b60781b815260110190565b9081526040805191829003602090810183208451815495830151151568010000000000000000026001600160481b03199096166001600160401b03918216179590951790558282018252620004cc620005e8821b179093168252600192820183905251909190620002ca906c686173526f6e42616c616e636560981b8152600d0190565b9081526040805191829003602090810183208451815495830151151568010000000000000000026001600160481b03199096166001600160401b039182161795909517905582820182526200023062000616821b17909316825260019282018390525190919062000350906e686173546f6b656e42616c616e636560881b8152600f0190565b908152604051602091819003820190208251815493909201516001600160401b039092166001600160481b03199093169290921768010000000000000000911515919091021790555062000784565b60008082806020019051810190620003b89190620006f0565b600080546040516368de040960e11b81526001600160a01b038881166004830152939450919262010000909104169063d1bc081290602401602060405180830381865afa1580156200040e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004349190620006f0565b15159115159190911491505092915050565b600080546040516368de040960e11b81526001600160a01b0385811660048301528392620100009004169063d1bc081290602401602060405180830381865afa15801562000498573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004be9190620006f0565b949350505050565b600080546040516368de040960e11b81526001600160a01b0385811660048301528392620100009004169063d1bc081290602401602060405180830381865afa15801562000518573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200053e9190620006f0565b15949350505050565b6000808280602001905181019062000560919062000714565b60008054604051635eeadb0d60e01b81526001600160a01b0388811660048301529394509192620100009091041690635eeadb0d906024016040805180830381865afa158015620005b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005db91906200072e565b5091909111949350505050565b6000808280602001905181019062000601919062000714565b6001600160a01b038516311191505092915050565b60008060008380602001905181019062000631919062000753565b6040516370a0823160e01b81526001600160a01b03888116600483015292945090925082918416906370a0823190602401602060405180830381865afa15801562000680573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006a6919062000714565b1195945050505050565b6001600160a01b0381168114620006c657600080fd5b50565b600060208284031215620006dc57600080fd5b8151620006e981620006b0565b9392505050565b6000602082840312156200070357600080fd5b81518015158114620006e957600080fd5b6000602082840312156200072757600080fd5b5051919050565b600080604083850312156200074257600080fd5b505080516020909101519092909150565b600080604083850312156200076757600080fd5b82516200077481620006b0565b6020939093015192949293505050565b6107f180620007946000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637db29fc9116100665780637db29fc9146100f8578063a61763fd1461010b578063a8bdda041461011e578063b6b715e614610131578063dc5485991461014457600080fd5b806301ffc9a714610098578063384197b2146100bf578063565255ad146100d2578063646b3662146100e5575b600080fd5b6100ab6100a6366004610502565b610157565b604051901515815260200160405180910390f35b6100ab6100cd3660046105ee565b61018e565b6100ab6100e03660046105ee565b610230565b6100ab6100f336600461063e565b6102c5565b6100ab6101063660046105ee565b6102fd565b6100ab6101193660046105ee565b610399565b6100ab61012c366004610673565b610417565b6100ab61013f3660046105ee565b610457565b6100ab6101523660046105ee565b6104cc565b60006001600160e01b0319821663666b763360e11b148061018857506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080828060200190518101906101a591906106e9565b600080546040516368de040960e11b81526001600160a01b038881166004830152939450919262010000909104169063d1bc081290602401602060405180830381865afa1580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e91906106e9565b15159115159190911491505092915050565b600080600083806020019051810190610249919061070b565b6040516370a0823160e01b81526001600160a01b03888116600483015292945090925082918416906370a0823190602401602060405180830381865afa158015610297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bb9190610739565b1195945050505050565b60006001826040516102d79190610752565b9081526040519081900360200190205460ff680100000000000000009091041692915050565b600080828060200190518101906103149190610739565b60008054604051635eeadb0d60e01b81526001600160a01b0388811660048301529394509192620100009091041690635eeadb0d906024016040805180830381865afa158015610368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c9190610781565b5091909111949350505050565b600080546040516368de040960e11b81526001600160a01b0385811660048301528392620100009004169063d1bc081290602401602060405180830381865afa1580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e91906106e9565b15949350505050565b600061044f848360018660405161042e9190610752565b9081526040519081900360200190205463ffffffff6104f882150290911716565b949350505050565b600080546040516368de040960e11b81526001600160a01b0385811660048301528392620100009004169063d1bc081290602401602060405180830381865afa1580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f91906106e9565b600080828060200190518101906104e39190610739565b6001600160a01b038516311191505092915050565b6105006107a5565b565b60006020828403121561051457600080fd5b81356001600160e01b03198116811461052c57600080fd5b9392505050565b6001600160a01b038116811461054857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261057257600080fd5b813567ffffffffffffffff8082111561058d5761058d61054b565b604051601f8301601f19908116603f011681019082821181831017156105b5576105b561054b565b816040528381528660208588010111156105ce57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561060157600080fd5b823561060c81610533565b9150602083013567ffffffffffffffff81111561062857600080fd5b61063485828601610561565b9150509250929050565b60006020828403121561065057600080fd5b813567ffffffffffffffff81111561066757600080fd5b61044f84828501610561565b60008060006060848603121561068857600080fd5b833561069381610533565b9250602084013567ffffffffffffffff808211156106b057600080fd5b6106bc87838801610561565b935060408601359150808211156106d257600080fd5b506106df86828701610561565b9150509250925092565b6000602082840312156106fb57600080fd5b8151801515811461052c57600080fd5b6000806040838503121561071e57600080fd5b825161072981610533565b6020939093015192949293505050565b60006020828403121561074b57600080fd5b5051919050565b6000825160005b818110156107735760208186018101518583015201610759565b506000920191825250919050565b6000806040838503121561079457600080fd5b505080516020909101519092909150565b634e487b7160e01b600052605160045260246000fdfea26469706673582212200af36bf8e5f6973e0553986d8f96b2c06b893c572e8274bf85e66d9dd2cd517364736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80637db29fc9116100665780637db29fc9146100f8578063a61763fd1461010b578063a8bdda041461011e578063b6b715e614610131578063dc5485991461014457600080fd5b806301ffc9a714610098578063384197b2146100bf578063565255ad146100d2578063646b3662146100e5575b600080fd5b6100ab6100a6366004610502565b610157565b604051901515815260200160405180910390f35b6100ab6100cd3660046105ee565b61018e565b6100ab6100e03660046105ee565b610230565b6100ab6100f336600461063e565b6102c5565b6100ab6101063660046105ee565b6102fd565b6100ab6101193660046105ee565b610399565b6100ab61012c366004610673565b610417565b6100ab61013f3660046105ee565b610457565b6100ab6101523660046105ee565b6104cc565b60006001600160e01b0319821663666b763360e11b148061018857506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080828060200190518101906101a591906106e9565b600080546040516368de040960e11b81526001600160a01b038881166004830152939450919262010000909104169063d1bc081290602401602060405180830381865afa1580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e91906106e9565b15159115159190911491505092915050565b600080600083806020019051810190610249919061070b565b6040516370a0823160e01b81526001600160a01b03888116600483015292945090925082918416906370a0823190602401602060405180830381865afa158015610297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bb9190610739565b1195945050505050565b60006001826040516102d79190610752565b9081526040519081900360200190205460ff680100000000000000009091041692915050565b600080828060200190518101906103149190610739565b60008054604051635eeadb0d60e01b81526001600160a01b0388811660048301529394509192620100009091041690635eeadb0d906024016040805180830381865afa158015610368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c9190610781565b5091909111949350505050565b600080546040516368de040960e11b81526001600160a01b0385811660048301528392620100009004169063d1bc081290602401602060405180830381865afa1580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e91906106e9565b15949350505050565b600061044f848360018660405161042e9190610752565b9081526040519081900360200190205463ffffffff6104f882150290911716565b949350505050565b600080546040516368de040960e11b81526001600160a01b0385811660048301528392620100009004169063d1bc081290602401602060405180830381865afa1580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f91906106e9565b600080828060200190518101906104e39190610739565b6001600160a01b038516311191505092915050565b6105006107a5565b565b60006020828403121561051457600080fd5b81356001600160e01b03198116811461052c57600080fd5b9392505050565b6001600160a01b038116811461054857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261057257600080fd5b813567ffffffffffffffff8082111561058d5761058d61054b565b604051601f8301601f19908116603f011681019082821181831017156105b5576105b561054b565b816040528381528660208588010111156105ce57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561060157600080fd5b823561060c81610533565b9150602083013567ffffffffffffffff81111561062857600080fd5b61063485828601610561565b9150509250929050565b60006020828403121561065057600080fd5b813567ffffffffffffffff81111561066757600080fd5b61044f84828501610561565b60008060006060848603121561068857600080fd5b833561069381610533565b9250602084013567ffffffffffffffff808211156106b057600080fd5b6106bc87838801610561565b935060408601359150808211156106d257600080fd5b506106df86828701610561565b9150509250925092565b6000602082840312156106fb57600080fd5b8151801515811461052c57600080fd5b6000806040838503121561071e57600080fd5b825161072981610533565b6020939093015192949293505050565b60006020828403121561074b57600080fd5b5051919050565b6000825160005b818110156107735760208186018101518583015201610759565b506000920191825250919050565b6000806040838503121561079457600080fd5b505080516020909101519092909150565b634e487b7160e01b600052605160045260246000fdfea26469706673582212200af36bf8e5f6973e0553986d8f96b2c06b893c572e8274bf85e66d9dd2cd517364736f6c63430008150033",
  "devdoc": {
    "details": "Contract for managing restrictions for creating and claiming gifts",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "checkRestriction(address,string,bytes)": {
        "details": "Checks if a user satisfies a specific restriction.",
        "params": {
          "args": "Additional arguments for the restriction.",
          "id": "The ID of the restriction.",
          "user": "The address of the user."
        },
        "returns": {
          "_0": "A boolean indicating if the user satisfies the restriction."
        }
      },
      "hasBlessingStatus(address,bytes)": {
        "details": "Checks if a user has a specific Atia's blessing status.",
        "params": {
          "args": "Additional arguments for the restriction.",
          "user": "The address of the user."
        },
        "returns": {
          "_0": "A boolean indicating if the user has the requested blessing status."
        }
      },
      "hasBlessingStreak(address,bytes)": {
        "details": "Checks if a user has a blessing streak greater than a minimum amount.",
        "params": {
          "args": "Additional arguments for the restriction.",
          "user": "The address of the user."
        },
        "returns": {
          "_0": "A boolean indicating if the user has a blessing streak greater than the minimum amount."
        }
      },
      "hasRonBalance(address,bytes)": {
        "details": "Checks if a user's balance of RON tokens is greater than a minimum amount.",
        "params": {
          "args": "Additional arguments for the restriction.",
          "user": "The address of the user."
        },
        "returns": {
          "_0": "A boolean indicating if the user's RON token balance is greater than the minimum amount."
        }
      },
      "hasTokenBalance(address,bytes)": {
        "details": "Checks if a user's balance of a specific token is greater than a minimum amount.",
        "params": {
          "args": "Additional arguments for the restriction.",
          "user": "The address of the user."
        },
        "returns": {
          "_0": "A boolean indicating if the user's token balance is greater than the minimum amount."
        }
      },
      "isBlessingActive(address,bytes)": {
        "details": "Checks if a user's blessing is currently active.",
        "params": {
          "user": "The address of the user."
        },
        "returns": {
          "_0": "A boolean indicating if the user's blessing is active."
        }
      },
      "isBlessingInactive(address,bytes)": {
        "details": "Checks if a user's blessing is currently inactive.",
        "params": {
          "user": "The address of the user."
        },
        "returns": {
          "_0": "A boolean indicating if the user's blessing is inactive."
        }
      },
      "isValidRestriction(string)": {
        "details": "Checks if a restriction with the given ID exists.",
        "params": {
          "id": "The ID of the restriction."
        },
        "returns": {
          "_0": "A boolean indicating if the restriction exists."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "RestrictionControl",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/RestrictionControl/RestrictionControl.sol:RestrictionControl",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/RestrictionControl/RestrictionControl.sol:RestrictionControl",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10275,
        "contract": "contracts/RestrictionControl/RestrictionControl.sol:RestrictionControl",
        "label": "atiaShrineContract",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IAtiaShrine)9773"
      },
      {
        "astId": 10293,
        "contract": "contracts/RestrictionControl/RestrictionControl.sol:RestrictionControl",
        "label": "conditions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Restriction)10288_storage)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAtiaShrine)9773": {
        "encoding": "inplace",
        "label": "contract IAtiaShrine",
        "numberOfBytes": "20"
      },
      "t_function_internal_view(t_address,t_bytes_memory_ptr)returns(t_bool)": {
        "encoding": "inplace",
        "label": "function (address,bytes) view returns (bool)",
        "numberOfBytes": "8"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Restriction)10288_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct RestrictionControl.Restriction)",
        "numberOfBytes": "32",
        "value": "t_struct(Restriction)10288_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Restriction)10288_storage": {
        "encoding": "inplace",
        "label": "struct RestrictionControl.Restriction",
        "members": [
          {
            "astId": 10285,
            "contract": "contracts/RestrictionControl/RestrictionControl.sol:RestrictionControl",
            "label": "conditionFunction",
            "offset": 0,
            "slot": "0",
            "type": "t_function_internal_view(t_address,t_bytes_memory_ptr)returns(t_bool)"
          },
          {
            "astId": 10287,
            "contract": "contracts/RestrictionControl/RestrictionControl.sol:RestrictionControl",
            "label": "exists",
            "offset": 8,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}